
/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com"> 
	MIT License Copyright (c) 2018 simple 

*/

call "C:\Users\thecarisma\Documents\SIMPLE GITHUB\simple\src\parser\node\CodeBlockNode.sim" -> simple.parser.node

call "C:\Users\thecarisma\Documents\SIMPLE GITHUB\simple\src\parser\node\BreakNode.sim"

call "C:\Users\thecarisma\Documents\SIMPLE GITHUB\simple\src\parser\node\ContinueNode.sim"

call "C:\Users\thecarisma\Documents\SIMPLE GITHUB\simple\src\parser\node\ClassNode.sim"

package simple.parser

class Parser 

	tokens = []  
	position = 0 
	
	#1
	block endOfStream()
		return position > len(tokens) 
	
	#2
	block parse(intokens)
		tokens = intokens
		position = 0 
		
		nodes = new CodeBlockNode(location(tokens, position))
		while (endOfStream() == false) 
			add(nodes.getChildren(), parseStatement()) 
		end
		return nodes
	
	#3	
	block parseStatement()
		if -> acceptTokenString(TOKENTYPE_IDENTIFIER, "break")
			return new BreakNode(location(tokens, position))
		elif -> acceptTokenString(TOKENTYPE_IDENTIFIER, "continue")
			return new ContinueNode(location(tokens, position))
		elif -> acceptTokenString(TOKENTYPE_IDENTIFIER, "class")
			return parseClass()
		elif -> acceptTokenString(TOKENTYPE_IDENTIFIER, "do")
			println("it do") 
		elif -> acceptTokenString(TOKENTYPE_IDENTIFIER, "enum")
			println("it enum") 
		elif -> acceptTokenString(TOKENTYPE_IDENTIFIER, "for")
			println("it for") 
		elif -> acceptTokenString(TOKENTYPE_IDENTIFIER, "call")
			println("it call") 
		elif -> acceptTokenString(TOKENTYPE_IDENTIFIER, "block")
			println("it block") 
		elif -> acceptTokenString(TOKENTYPE_IDENTIFIER, "if")
			println("it if") 
		elif -> acceptTokenString(TOKENTYPE_IDENTIFIER, "private")
			println("it private") 
		elif -> acceptTokenString(TOKENTYPE_IDENTIFIER, "throw")
			println("it throw") 
		elif -> acceptTokenString(TOKENTYPE_IDENTIFIER, "return")
			println("it return") 
		elif -> acceptTokenString(TOKENTYPE_IDENTIFIER, "switch")
			println("it switch") 
		elif -> acceptTokenString(TOKENTYPE_IDENTIFIER, "trait")
			println("it trait") 
		elif -> acceptTokenString(TOKENTYPE_IDENTIFIER, "try")
			println("it try") 
		elif -> acceptTokenString(TOKENTYPE_IDENTIFIER, "until")
			println("it until") 
		elif -> acceptTokenString(TOKENTYPE_IDENTIFIER, "while")
			println("it while") 
		elif -> acceptTokenString(TOKENTYPE_IDENTIFIER, "with")
			println("it with") 
		else
			println("pending token") position++
		end
		
	#8
	block parseClass()
		clocation = location(tokens, position) inherits = []
		name = expectToken(TOKENTYPE_IDENTIFIER).getValue()
		if -> acceptToken(TOKENTYPE_COLON) or acceptTokenString(TOKENTYPE_IDENTIFIER, "inherit")
			do {
				add(inherits, parseExpression())
			} while -> acceptToken(TOKENTYPE_COLON)
			return new ClassNode(clocation, name, parseStatement(), inherits)
		end
		return new ClassNode(clocation, name, parseStatement(), null)
		
	#4
	block acceptToken(tokenType)
		ret = matchToken(tokenType)
		if ret == true
			position++
		end
		return ret
	
	#5	
	block acceptTokenString(tokenType, value)
		ret = matchTokenString(tokenType, value)
		if -> ret == true
			position++
		end
		return ret
	
	#6
	block matchToken(tokenType)
		return endOfStream() == false and tokens[position].getTokenType() == tokenType
		
	#7
	block matchTokenString(tokenType, value)
		return endOfStream() == false and tokens[position].getTokenType() == tokenType and stringEquals(tokens[position].getValue(), value)
		
	block expectToken(tokenType)
		if matchToken(tokenType)
			return tokens[position]
		end
		throwScannerException(location(tokens, position), "Expected token of type '"+getTokenTypeValue(tokenType)+"', But got token of type '"+getTokenTypeValue(tokens[position].getTokenType())+"' with value '"+tokens[position].getValue()+"'", UNEXPECTED_TOKEN_TYPE)
		
	block expectTokenString(tokenType, value)
		if matchTokenString(tokenType, value)
			return tokens[position++]
		end
		throwScannerException(location(tokens, position), "Expected token of type '"+getTokenTypeValue(tokenType)+"' with value '"+value+"', But got token of type '"+getTokenTypeValue(tokens[position].getTokenType())+"' with value '"+tokens[position].getValue()+"'", UNEXPECTED_TOKEN_TYPE)
	
	
	
	
	
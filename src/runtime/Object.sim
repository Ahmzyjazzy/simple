
/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com"> 
	MIT License Copyright (c) 2018 simple 

*/

call "C:\Users\thecarisma\Documents\SIMPLE GITHUB\simple\src\runtime\TypeDefinition.sim" 

call "C:\Users\thecarisma\Documents\SIMPLE GITHUB\simple\src\utilities\Dictionary.sim"

INVOKE = "new"
ADD = "__add__"
SUBTRACT = "__subtract__"
MULTIPLY = "__multiply__"
DIVIDE = "__divide__"
MODULUS = "__modulus__"
POWER = "__power__"
INTEGERDIVISION = "__intdivision__"
BITSHIFTLEFT = "__bitshiftleft__"
BITSHIFTRIGHT = "__bitshiftright__"
EQUALTO = "__equals__"
NOTEQUALTO = "__notequal__"
GREATERTHAN = "__greater__"
GREATERTHANOREQUAL = "__greaterorequal__"
LESSERTHAN = "__lesser__"
LESSERTHANOREQUAL = "__lesserorequal__"
BITWISEAND = "__bitwiseand__"
BITWISEOR = "__bitwiseor__"
BITWISENOT = "__bitwisenot__"
LOGICALAND = "__logicaland__"
LOGICALOR = "__logicalor__"
LOGICALNOT = "__logicalnot__"
NEGATE = "__negate__"
INDEX = "__index__"
STOREINDEX = "__storeindex__"
ITER = "__iter__"
ITERABLEFULL = "__iterfull__"
ITERABLENEXT = "__iternext__"
ENTER = "__enter__"
EXIT = "__exit__"
DISPOSE = "dispose"
TOBIGINT = "tobigint"
TOBOOL = "tobool"
TOCHAR = "tochar"
TOINT = "toint"
TOFLOAT = "tofloat"
TOLIST = "tolist"
TOSTRING = "tostring"
TOTUPLE = "totuple"
XOR = "__xor__"

class Object 

	typeDefinition = null
	isPrivate = false
	sNull = null
	parent = null
	sFalse = null
	sTrue = false
	sNumber = 0
	boundAttributes = new simple.utilities.Dictionary
	types = []

	block init()
		typeDefinition = new TypeDefinition() typeDefinition.init("object")
		
	block getType()
		typeDefinition.init("objectico")
		return typeDefinition
		
	block addAttribute(name, value)
		if containsAttribute(name) {
			boundAttributes.remove(name)
		}
		boundAttributes.add(name, value)
		
	block addBlockAttribute(name, blocky, paramLenght)
		ablocky = new SimpleFunction(blocky, paramLenght)
		addAtribute(name, ablocky)
		
	block addBlockAttribute(name, blocky, ilen)	
		llen = [ilen]
		addBlockAttribute(name, blocky, llen)
		
	block containsAttribute(name)
		return boundAttributes.containKey(name)
		
	block getAttribute(vm, name)
		if containsAttribute(name) == false {
			vm.throwException() ############## to do
		}
		#ret = boundAttributes.get(name)
		ret = boundAttributes[name]
		if stringContains(ret.getType(), "simple_function")
			ret.setParent(this)
		elif stringContains(ret.getType(), "simple_property")
			prop = ret
			prop.Get().setParent(this)
			if prop.Set() != null {
				prop.Set().setParent(this)
			}
		end
		return ret
		
	block getAttributes()
		return boundAttributes()
		
	block removeAttribute(name)
		boundAttributes.remove(name)
		
	block addType(typeDef)
		#if findItem(types, typeDef) < 1 {
			str = getType()
			display getType()
		#}
		
		
		
		
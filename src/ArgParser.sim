
package simple

#1 #2
args = []
position = 0

class ArgParser

	executor = 2
	exe = 1

	#3
	block ArgParser() 
	
	#4
	block parse( inargs )
		args = inargs
		
		if len(args) < 0 
			getHelp()
		end
		
		for -> position = 0 to len(args)
			switch args[position]
				case "-h"
					getHelp() 
				case "--help"
					getHelp() 
				case "-s" 
					showTokens() 
				case "-token"
					showTokens() 
				case "-d"
					development = true 
				case "--dev"
					development = true 
				default 
					filePath = args[position]
					position++ cmdArgs = [] 
					for n = position to len(args)
						add(cmdArgs, args[n])
					loop
					commandLineArguments = cmdArgs
					break
			end
		loop
		
		if (len(args) > 1) {
			#printParsedArgs(filePath, cmdArgs)
		}
	
	
	
/**
	comment map
	-------
	#author - Azeez Adewale[[twitter]@iamthecarisma]
							 [[github]@Thecarisma]
	#date - Jan 21 2018
	#syntax - allsyntax
	#package - simple
	#name - ArgParser.sim
	#path - ./src/ArgParser.sim
	#detail - the command line are parsed into tokens that the 
	compiler and vm will understand
	
	#1 - argument dummy variable 
	#2 - position declaration
	#3 - empty constructor for the ArgParser class
	#4 - the block that parse the arguments

**/
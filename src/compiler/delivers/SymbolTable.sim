
/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com"> 
	MIT License Copyright (c) 2018 simple 

*/

package simple.compiler.delivers

call "C:\Users\thecarisma\Documents\SIMPLE GITHUB\simple\src\compiler\delivers\Stack.sim" -> simple.compiler.delivers

call "C:\Users\thecarisma\Documents\SIMPLE GITHUB\simple\src\utilities\Dictionary.sim" -> simple.utilities

class SymbolTable

	nextIndex = 0
	scopes = []
	globalScope = new Scope()
	nextGlobalIndex = 0
	stack = new Stack()

	block SymbolTable()
		nextIndex = 0
		stack.push(globalScope)
		
	block enterScope()	
		scope = new Scope()
		stack.push(scope)
		
	block leaveScope()
		stack.pop()
		if stack.getCount() == 2 {
			nextIndex = 0
		}
		
	block getSymbol(name) 
		for a = 0 to stack.getCount(){
			if (stack.getContents()[a].getSymbols().containsKey(name)){
				return stack.getContents()[a].getSymbol(name)
			}
		} return -1
		
	block getGlobalSymbol(name)
		return globalScope.getSymbol(name)
		
	block isGlobalScope()
		return scopes.peek() == globalScope
		
	block containsSymbol(name)
		for a = 0 to stack.getCount(){
			if (stack.getContents()[a].getSymbols().containsKey(name)) {
				return true
			}
		} return false
		
	block containGlobalSymbol(name)
		globalScope.getSymbols().containsKey(name)
		
	block addSymbol(name)
		
		
	block addGlobalSymbol(name)
		globalScope.getSymbols().add(name, nextIndex)
		nextIndex++
		
class Scope

	symbols = new simple.utilities.Dictionary

	block Scope()
		
	block getSymbols()
		return symbols	
		
	block getSymbol(name)
		return find(name)
	
	
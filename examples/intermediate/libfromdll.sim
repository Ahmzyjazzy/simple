/* 
	Copyright (c) 2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 simple-lang
*/

/* 
 * @Filename - libfromdll.sim
 * @Author - Azeez Adewale
 * @Date - 07 July 2018
 * @Time - 01:22 AM
 */

/*
	Generate .lib file from a .dll on windows os using the 
	Visual Studio Command Line tools
*/

call "simple/core/String.sim"
call "simple/debugging/Throw.sim"
call "simple/io/File.sim"
call "simple/system/System.sim"

cmdlen = lengthOf(cmdparams)
dllFile = null
dllFilePath = ""
keepTemp = false
arch = "x86"
isFirst = true
finalFunc = ""

block main()
	for a = 2 to cmdlen {
		if stringEndsWith(cmdparams[a],"dll") dllFilePath = cmdparams[a] 
		elif stringEndsWith(cmdparams[a],"t") || stringEndsWith(cmdparams[a],"temp") keepTemp = true
		else throw("Unknown Flag sent as parameter") 
		end
	}
	dllFile = new File(dllFilePath)
	if not dllFile.exists() {
		throw("The DLL file : "+dllFilePath+" cannot be found")
	}
	@ "dll file : "+dllFile.absolutePath()
	generateFunctionFromBatch()
	
block generateFunctionFromBatch()
	__exec("fetchfunction.bat "+dllFile.absolutePath()+" "+arch)
	funcFile = new File(dllFile.absolutePath()+".txt")
	if not funcFile.exists()
		throw("The batch file failed to exports the dll functions")
	end
	funcs = funcFile.readFileAsString()
	startCount = 0
	for a = 0 to lengthOf(funcs) {
		startCount = a+4
		if funcs[a] == "n" && funcs[a+1] == "a" && funcs[a+2] == "m" && funcs[a+3] == "e" && funcs[a+4] != "s"
			break
		end
	end
	newFuncs = ""
	funcs = trimString(funcs)
	@ "The function off set is "+startCount
	for a = startCount to lengthOf(funcs)
		if funcs[a] == "S" && funcs[a+1] == "u" && funcs[a+2] == "m" && funcs[a+3] == "m" && funcs[a+4] == "a" && funcs[a+5] == "r" && funcs[a+6] == "y"
			break
		end
		newFuncs+=funcs[a]
	end
	newFuncs2 = splitString(newFuncs,crlf)
	for a = 0 to lengthOf(newFuncs2) 
		innerF = splitString(newFuncs2[a]," ")
		finalFunction(innerF)
	end
	@"The final functions are : "+crlf+crlf
	#@finalFunc
	@removeString(dllFile.absolutePath(),".dll")
	defFile = new File(removeString(dllFile.absolutePath(),".dll")+".def")
	defFile.write(finalFunc)
	
block finalFunction(func)
	blen = lengthOf(func)
	if blen <= 0 else
		if isFirst isFirst = false
			finalFunc = "EXPORTS"+crlf end
		finalFunc += func[blen] + crlf
	end
	
block generateLib(defFile)
	#lib /def:C:\mypath\mylib.def /OUT:C:\mypath\mylib.lib





	

; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	SIMPLE_IC_OP
_BSS	SEGMENT
$SG82645 DB	01H DUP (?)
$SG82646 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
SIMPLE_IC_OP DQ	FLAT:$SG82423
	DQ	FLAT:$SG82424
	DQ	FLAT:$SG82425
	DQ	FLAT:$SG82426
	DQ	FLAT:$SG82427
	DQ	FLAT:$SG82428
	DQ	FLAT:$SG82429
	DQ	FLAT:$SG82430
	DQ	FLAT:$SG82431
	DQ	FLAT:$SG82432
	DQ	FLAT:$SG82433
	DQ	FLAT:$SG82434
	DQ	FLAT:$SG82435
	DQ	FLAT:$SG82436
	DQ	FLAT:$SG82437
	DQ	FLAT:$SG82438
	DQ	FLAT:$SG82439
	DQ	FLAT:$SG82440
	DQ	FLAT:$SG82441
	DQ	FLAT:$SG82442
	DQ	FLAT:$SG82443
	DQ	FLAT:$SG82444
	DQ	FLAT:$SG82445
	DQ	FLAT:$SG82446
	DQ	FLAT:$SG82447
	DQ	FLAT:$SG82448
	DQ	FLAT:$SG82449
	DQ	FLAT:$SG82450
	DQ	FLAT:$SG82451
	DQ	FLAT:$SG82452
	DQ	FLAT:$SG82453
	DQ	FLAT:$SG82454
	DQ	FLAT:$SG82455
	DQ	FLAT:$SG82456
	DQ	FLAT:$SG82457
	DQ	FLAT:$SG82458
	DQ	FLAT:$SG82459
	DQ	FLAT:$SG82460
	DQ	FLAT:$SG82461
	DQ	FLAT:$SG82462
	DQ	FLAT:$SG82463
	DQ	FLAT:$SG82464
	DQ	FLAT:$SG82465
	DQ	FLAT:$SG82466
	DQ	FLAT:$SG82467
	DQ	FLAT:$SG82468
	DQ	FLAT:$SG82469
	DQ	FLAT:$SG82470
	DQ	FLAT:$SG82471
	DQ	FLAT:$SG82472
	DQ	FLAT:$SG82473
	DQ	FLAT:$SG82474
	DQ	FLAT:$SG82475
	DQ	FLAT:$SG82476
	DQ	FLAT:$SG82477
	DQ	FLAT:$SG82478
	DQ	FLAT:$SG82479
	DQ	FLAT:$SG82480
	DQ	FLAT:$SG82481
	DQ	FLAT:$SG82482
	DQ	FLAT:$SG82483
	DQ	FLAT:$SG82484
	DQ	FLAT:$SG82485
	DQ	FLAT:$SG82486
	DQ	FLAT:$SG82487
	DQ	FLAT:$SG82488
	DQ	FLAT:$SG82489
	DQ	FLAT:$SG82490
	DQ	FLAT:$SG82491
	DQ	FLAT:$SG82492
	DQ	FLAT:$SG82493
	DQ	FLAT:$SG82494
	DQ	FLAT:$SG82495
	DQ	FLAT:$SG82496
	DQ	FLAT:$SG82497
	DQ	FLAT:$SG82498
	DQ	FLAT:$SG82499
	DQ	FLAT:$SG82500
	DQ	FLAT:$SG82501
	DQ	FLAT:$SG82502
	DQ	FLAT:$SG82503
	DQ	FLAT:$SG82504
	DQ	FLAT:$SG82505
	DQ	FLAT:$SG82506
	DQ	FLAT:$SG82507
	DQ	FLAT:$SG82508
	DQ	FLAT:$SG82509
	DQ	FLAT:$SG82510
	DQ	FLAT:$SG82511
	DQ	FLAT:$SG82512
	DQ	FLAT:$SG82513
	DQ	FLAT:$SG82514
	DQ	FLAT:$SG82515
	DQ	FLAT:$SG82516
	DQ	FLAT:$SG82517
	DQ	FLAT:$SG82518
	DQ	FLAT:$SG82519
	DQ	FLAT:$SG82520
	DQ	FLAT:$SG82521
	DQ	FLAT:$SG82522
	DQ	FLAT:$SG82523
	DQ	FLAT:$SG82524
	DQ	FLAT:$SG82525
	DQ	FLAT:$SG82526
	DQ	FLAT:$SG82527
$SG82423 DB	'NewLine', 00H
$SG82424 DB	'FileName', 00H
	ORG $+3
$SG82425 DB	'Print', 00H
	ORG $+2
$SG82426 DB	'Class', 00H
	ORG $+2
$SG82427 DB	'Block', 00H
	ORG $+2
$SG82428 DB	'Dup', 00H
$SG82429 DB	'New', 00H
$SG82430 DB	'Give', 00H
	ORG $+3
$SG82434 DB	'JumpZ', 00H
	ORG $+2
$SG82437 DB	'JZ2', 00H
$SG82431 DB	'Private', 00H
$SG82432 DB	'NewLabel', 00H
	ORG $+3
$SG82433 DB	'Jump', 00H
	ORG $+3
$SG82435 DB	'Jump1', 00H
	ORG $+2
$SG82438 DB	'J12', 00H
$SG82436 DB	'JumpFOR', 00H
$SG82439 DB	'LoadA', 00H
	ORG $+2
$SG82440 DB	'Assignment', 00H
	ORG $+1
$SG82441 DB	'LoadSA', 00H
	ORG $+1
$SG82442 DB	'LoadIA', 00H
	ORG $+1
$SG82444 DB	'==', 00H
	ORG $+1
$SG82443 DB	'LoadAPushV', 00H
	ORG $+1
$SG82445 DB	'<', 00H
	ORG $+2
$SG82446 DB	'>', 00H
	ORG $+2
$SG82447 DB	'!=', 00H
	ORG $+1
$SG82448 DB	'<=', 00H
	ORG $+1
$SG82449 DB	'>=', 00H
	ORG $+1
$SG82450 DB	'PushC', 00H
	ORG $+2
$SG82451 DB	'PushN', 00H
	ORG $+2
$SG82452 DB	'PushV', 00H
	ORG $+2
$SG82453 DB	'PushP', 00H
	ORG $+2
$SG82454 DB	'PushPV', 00H
	ORG $+1
$SG82455 DB	'PushPLocal', 00H
	ORG $+1
$SG82456 DB	'SUM', 00H
$SG82457 DB	'SUB', 00H
$SG82458 DB	'MUL', 00H
$SG82459 DB	'DIV', 00H
$SG82460 DB	'MOD', 00H
$SG82461 DB	'Negative', 00H
	ORG $+3
$SG82462 DB	'Inc', 00H
$SG82463 DB	'IncP', 00H
	ORG $+3
$SG82464 DB	'LoadBlock', 00H
	ORG $+2
$SG82465 DB	'Call', 00H
	ORG $+3
$SG82466 DB	'Return', 00H
	ORG $+1
$SG82473 DB	'And', 00H
$SG82467 DB	'ReturnNull', 00H
	ORG $+1
$SG82474 DB	'Or', 00H
	ORG $+1
$SG82468 DB	'RetFromEval', 00H
$SG82475 DB	'Not', 00H
$SG82469 DB	'RetItemRef', 00H
	ORG $+1
$SG82480 DB	'Bye', 00H
$SG82470 DB	'ListStart', 00H
	ORG $+2
$SG82488 DB	'Try', 00H
$SG82471 DB	'ListItem', 00H
	ORG $+3
$SG82490 DB	'Range', 00H
	ORG $+2
$SG82502 DB	'Import', 00H
	ORG $+1
$SG82510 DB	'++', 00H
	ORG $+1
$SG82472 DB	'ListEnd', 00H
$SG82476 DB	'FreeStack', 00H
	ORG $+2
$SG82511 DB	'--', 00H
	ORG $+1
$SG82477 DB	'BlockFlag', 00H
	ORG $+2
$SG82512 DB	'BITAND', 00H
	ORG $+1
$SG82616 DB	0aH, 0aH, 00H
	ORG $+1
$SG82478 DB	'BlockExE', 00H
	ORG $+3
$SG82513 DB	'BITOR', 00H
	ORG $+2
$SG82514 DB	'BITNOT', 00H
	ORG $+1
$SG82624 DB	'PC', 00H
	ORG $+1
$SG82479 DB	'EndBlockExe', 00H
$SG82639 DB	' %f', 00H
$SG82481 DB	'ExitMark', 00H
	ORG $+3
$SG82515 DB	'BITXOR', 00H
	ORG $+1
$SG82644 DB	0aH, 00H
	ORG $+2
$SG82482 DB	'POPExitMark', 00H
$SG82483 DB	'Exit', 00H
	ORG $+3
$SG82516 DB	'BITSHL', 00H
	ORG $+5
$SG82484 DB	'IncJump', 00H
$SG82485 DB	'IncPJump', 00H
	ORG $+7
$SG82486 DB	'JumpVarLENum', 00H
	ORG $+3
$SG82487 DB	'JumpVarPLENum', 00H
	ORG $+2
$SG82489 DB	'Done', 00H
	ORG $+3
$SG82491 DB	'LoadMethod', 00H
	ORG $+5
$SG82492 DB	'SetScope', 00H
	ORG $+7
$SG82493 DB	'AfterCallMethod', 00H
$SG82494 DB	'BraceStart', 00H
	ORG $+5
$SG82495 DB	'BraceEnd', 00H
	ORG $+7
$SG82496 DB	'LoadBlockP', 00H
	ORG $+5
$SG82497 DB	'FreeLoadAScope', 00H
	ORG $+1
$SG82498 DB	'Loop', 00H
	ORG $+3
$SG82499 DB	'IncLPJump', 00H
	ORG $+6
$SG82500 DB	'JumpVarLPLENum', 00H
	ORG $+1
$SG82501 DB	'Modules', 00H
$SG82503 DB	'SetProperty', 00H
	ORG $+4
$SG82504 DB	'NoOperation', 00H
	ORG $+4
$SG82505 DB	'AfterCallMethod2', 00H
	ORG $+7
$SG82506 DB	'SetReference', 00H
	ORG $+3
$SG82507 DB	'KillReference', 00H
	ORG $+2
$SG82508 DB	'AssignmentPointer', 00H
	ORG $+6
$SG82509 DB	'BeforeEqual', 00H
$SG82517 DB	'BITSHR', 00H
	ORG $+5
$SG82518 DB	'StepNumber', 00H
	ORG $+5
$SG82519 DB	'POPStep', 00H
$SG82520 DB	'LoadAFirst', 00H
	ORG $+5
$SG82521 DB	'INCPJUMPSTEP1', 00H
	ORG $+2
$SG82522 DB	'JUMPVARPLENUMSTEP1', 00H
	ORG $+5
$SG82523 DB	'ANONYMOUS', 00H
	ORG $+6
$SG82524 DB	'CallClassInit', 00H
	ORG $+2
$SG82525 DB	'NewGlobalScope', 00H
	ORG $+1
$SG82526 DB	'EndGlobalScope', 00H
	ORG $+1
$SG82527 DB	'SetGlobalScope', 00H
	ORG $+1
$SG82618 DB	'Byte Code - Before Execution by the VM', 00H
	ORG $+1
$SG82620 DB	'Byte Code - After Execution by the VM', 00H
	ORG $+2
$SG82622 DB	'Data', 00H
	ORG $+3
$SG82623 DB	'OPCode', 00H
	ORG $+1
$SG82625 DB	0aH, ' %6s  %10s  %10s', 0aH, 00H
	ORG $+5
$SG82629 DB	0aH, ' %6d  %10s  ', 00H
	ORG $+2
$SG82635 DB	' %5s ', 00H
	ORG $+2
$SG82641 DB	' %5d ', 00H
	ORG $+2
$SG82643 DB	' %5p ', 00H
_DATA	ENDS
PUBLIC	simple_parser_icg_newoperation
PUBLIC	simple_parser_icg_newoperand
PUBLIC	simple_parser_icg_newoperandint
PUBLIC	simple_parser_icg_newoperanddouble
PUBLIC	simple_parser_icg_newoperandpointer
PUBLIC	simple_parser_icg_getactiveoperation
PUBLIC	simple_parser_icg_addoperand
PUBLIC	simple_parser_icg_addoperandint
PUBLIC	simple_parser_icg_addoperandpointer
PUBLIC	simple_parser_icg_showoutput
PUBLIC	simple_parser_icg_getoperationpos
PUBLIC	simple_parser_icg_deletelastoperation
PUBLIC	simple_parser_icg_duplicate
PUBLIC	simple_parser_icg_newlabel2
PUBLIC	simple_parser_icg_insertoperation
EXTRN	printf:PROC
EXTRN	puts:PROC
EXTRN	simple_list_getitem:PROC
EXTRN	simple_list_addint_gc:PROC
EXTRN	simple_list_addpointer_gc:PROC
EXTRN	simple_list_adddouble_gc:PROC
EXTRN	simple_list_addstring_gc:PROC
EXTRN	simple_list_newlist_gc:PROC
EXTRN	simple_list_getlist:PROC
EXTRN	simple_list_isnumber:PROC
EXTRN	simple_list_isstring:PROC
EXTRN	simple_list_deleteitem:PROC
EXTRN	simple_list_copy:PROC
EXTRN	simple_list_insertlist:PROC
EXTRN	print_line:PROC
EXTRN	_fltused:DWORD
pdata	SEGMENT
$pdata$simple_parser_icg_newoperation DD imagerel $LN4
	DD	imagerel $LN4+141
	DD	imagerel $unwind$simple_parser_icg_newoperation
$pdata$simple_parser_icg_newoperand DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$simple_parser_icg_newoperand
$pdata$simple_parser_icg_newoperandint DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$simple_parser_icg_newoperandint
$pdata$simple_parser_icg_newoperanddouble DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$simple_parser_icg_newoperanddouble
$pdata$simple_parser_icg_newoperandpointer DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$simple_parser_icg_newoperandpointer
$pdata$simple_parser_icg_addoperand DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$simple_parser_icg_addoperand
$pdata$simple_parser_icg_addoperandint DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$simple_parser_icg_addoperandint
$pdata$simple_parser_icg_addoperandpointer DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$simple_parser_icg_addoperandpointer
$pdata$simple_parser_icg_showoutput DD imagerel $LN19
	DD	imagerel $LN19+536
	DD	imagerel $unwind$simple_parser_icg_showoutput
$pdata$simple_parser_icg_deletelastoperation DD imagerel $LN4
	DD	imagerel $LN4+90
	DD	imagerel $unwind$simple_parser_icg_deletelastoperation
$pdata$simple_parser_icg_duplicate DD imagerel $LN7
	DD	imagerel $LN7+152
	DD	imagerel $unwind$simple_parser_icg_duplicate
$pdata$simple_parser_icg_newlabel2 DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$simple_parser_icg_newlabel2
$pdata$simple_parser_icg_insertoperation DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$simple_parser_icg_insertoperation
pdata	ENDS
xdata	SEGMENT
$unwind$simple_parser_icg_newoperation DD 010d01H
	DD	0420dH
$unwind$simple_parser_icg_newoperand DD 010e01H
	DD	0420eH
$unwind$simple_parser_icg_newoperandint DD 010d01H
	DD	0420dH
$unwind$simple_parser_icg_newoperanddouble DD 010f01H
	DD	0420fH
$unwind$simple_parser_icg_newoperandpointer DD 010e01H
	DD	0420eH
$unwind$simple_parser_icg_addoperand DD 011301H
	DD	04213H
$unwind$simple_parser_icg_addoperandint DD 011301H
	DD	04213H
$unwind$simple_parser_icg_addoperandpointer DD 011301H
	DD	04213H
$unwind$simple_parser_icg_showoutput DD 010d01H
	DD	0820dH
$unwind$simple_parser_icg_deletelastoperation DD 010901H
	DD	04209H
$unwind$simple_parser_icg_duplicate DD 011201H
	DD	08212H
$unwind$simple_parser_icg_newlabel2 DD 010901H
	DD	04209H
$unwind$simple_parser_icg_insertoperation DD 011201H
	DD	04212H
xdata	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 48
nPos$ = 56
opcode$ = 64
simple_parser_icg_insertoperation PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_codegen.c
; Line 57
$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 59
  00012	8b 54 24 38	 mov	 edx, DWORD PTR nPos$[rsp]
  00016	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  0001b	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0001f	e8 00 00 00 00	 call	 simple_list_insertlist
  00024	48 8b 4c 24 30	 mov	 rcx, QWORD PTR parser$[rsp]
  00029	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax
; Line 60
  0002d	44 8b 44 24 40	 mov	 r8d, DWORD PTR opcode$[rsp]
  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00037	48 8b 50 38	 mov	 rdx, QWORD PTR [rax+56]
  0003b	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00040	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00047	e8 00 00 00 00	 call	 simple_list_addint_gc
; Line 64
  0004c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00050	c3		 ret	 0
simple_parser_icg_insertoperation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 48
simple_parser_icg_newlabel2 PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_codegen.c
; Line 231
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 233
  00009	ba 09 00 00 00	 mov	 edx, 9
  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR parser$[rsp]
  00013	e8 00 00 00 00	 call	 simple_parser_icg_newoperation
; Line 234
  00018	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  0001d	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00021	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
; Line 235
  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
simple_parser_icg_newlabel2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 32
list2$ = 40
list$ = 48
parser$ = 80
nStart$ = 88
nEnd$ = 96
simple_parser_icg_duplicate PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_codegen.c
; Line 194
$LN7:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H
; Line 201
  00012	8b 44 24 60	 mov	 eax, DWORD PTR nEnd$[rsp]
  00016	39 44 24 58	 cmp	 DWORD PTR nStart$[rsp], eax
  0001a	7f 77		 jg	 SHORT $LN4@simple_par
  0001c	48 8b 44 24 50	 mov	 rax, QWORD PTR parser$[rsp]
  00021	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00025	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00028	39 44 24 60	 cmp	 DWORD PTR nEnd$[rsp], eax
  0002c	7f 65		 jg	 SHORT $LN4@simple_par
; Line 202
  0002e	8b 44 24 58	 mov	 eax, DWORD PTR nStart$[rsp]
  00032	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax
  00036	eb 0a		 jmp	 SHORT $LN3@simple_par
$LN2@simple_par:
  00038	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  0003c	ff c0		 inc	 eax
  0003e	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax
$LN3@simple_par:
  00042	8b 44 24 60	 mov	 eax, DWORD PTR nEnd$[rsp]
  00046	39 44 24 20	 cmp	 DWORD PTR x$[rsp], eax
  0004a	7f 47		 jg	 SHORT $LN1@simple_par
; Line 203
  0004c	48 8b 44 24 50	 mov	 rax, QWORD PTR parser$[rsp]
  00051	48 8b 50 30	 mov	 rdx, QWORD PTR [rax+48]
  00055	48 8b 44 24 50	 mov	 rax, QWORD PTR parser$[rsp]
  0005a	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00061	e8 00 00 00 00	 call	 simple_list_newlist_gc
  00066	48 89 44 24 30	 mov	 QWORD PTR list$[rsp], rax
; Line 204
  0006b	8b 54 24 20	 mov	 edx, DWORD PTR x$[rsp]
  0006f	48 8b 44 24 50	 mov	 rax, QWORD PTR parser$[rsp]
  00074	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00078	e8 00 00 00 00	 call	 simple_list_getlist
  0007d	48 89 44 24 28	 mov	 QWORD PTR list2$[rsp], rax
; Line 205
  00082	48 8b 54 24 28	 mov	 rdx, QWORD PTR list2$[rsp]
  00087	48 8b 4c 24 30	 mov	 rcx, QWORD PTR list$[rsp]
  0008c	e8 00 00 00 00	 call	 simple_list_copy
; Line 226
  00091	eb a5		 jmp	 SHORT $LN2@simple_par
$LN1@simple_par:
$LN4@simple_par:
; Line 228
  00093	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00097	c3		 ret	 0
simple_parser_icg_duplicate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 48
simple_parser_icg_deletelastoperation PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_codegen.c
; Line 186
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 187
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  0000e	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00012	83 78 10 00	 cmp	 DWORD PTR [rax+16], 0
  00016	7e 3d		 jle	 SHORT $LN1@simple_par
; Line 188
  00018	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  0001d	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00021	8b 50 10	 mov	 edx, DWORD PTR [rax+16]
  00024	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00029	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0002d	e8 00 00 00 00	 call	 simple_list_deleteitem
; Line 189
  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00037	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0003b	8b 50 10	 mov	 edx, DWORD PTR [rax+16]
  0003e	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00043	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00047	e8 00 00 00 00	 call	 simple_list_getlist
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR parser$[rsp]
  00051	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax
$LN1@simple_par:
; Line 191
  00055	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00059	c3		 ret	 0
simple_parser_icg_deletelastoperation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 8
simple_parser_icg_getoperationpos PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_codegen.c
; Line 114
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
; Line 117
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR parser$[rsp]
  0000a	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0000e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
; Line 118
  00012	c3		 ret	 0
simple_parser_icg_getoperationpos ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
y$ = 32
x$ = 36
nCount$ = 40
nCount2$ = 44
list$ = 48
listGenCode$ = 80
nStatus$ = 88
simple_parser_icg_showoutput PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_codegen.c
; Line 139
$LN19:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H
; Line 144
  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82616
  00014	e8 00 00 00 00	 call	 printf
; Line 145
  00019	e8 00 00 00 00	 call	 print_line
; Line 146
  0001e	83 7c 24 58 01	 cmp	 DWORD PTR nStatus$[rsp], 1
  00023	75 0e		 jne	 SHORT $LN16@simple_par
; Line 147
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82618
  0002c	e8 00 00 00 00	 call	 puts
; Line 149
  00031	eb 0c		 jmp	 SHORT $LN15@simple_par
$LN16@simple_par:
; Line 150
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82620
  0003a	e8 00 00 00 00	 call	 puts
$LN15@simple_par:
; Line 152
  0003f	e8 00 00 00 00	 call	 print_line
; Line 153
  00044	48 8b 44 24 50	 mov	 rax, QWORD PTR listGenCode$[rsp]
  00049	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0004c	89 44 24 28	 mov	 DWORD PTR nCount$[rsp], eax
; Line 154
  00050	83 7c 24 28 00	 cmp	 DWORD PTR nCount$[rsp], 0
  00055	0f 8e 9b 01 00
	00		 jle	 $LN14@simple_par
; Line 155
  0005b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG82622
  00062	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG82623
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82624
  00070	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82625
  00077	e8 00 00 00 00	 call	 printf
; Line 156
  0007c	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR x$[rsp], 1
  00084	eb 0a		 jmp	 SHORT $LN13@simple_par
$LN12@simple_par:
  00086	8b 44 24 24	 mov	 eax, DWORD PTR x$[rsp]
  0008a	ff c0		 inc	 eax
  0008c	89 44 24 24	 mov	 DWORD PTR x$[rsp], eax
$LN13@simple_par:
  00090	8b 44 24 28	 mov	 eax, DWORD PTR nCount$[rsp]
  00094	39 44 24 24	 cmp	 DWORD PTR x$[rsp], eax
  00098	0f 8f 4c 01 00
	00		 jg	 $LN11@simple_par
; Line 157
  0009e	8b 54 24 24	 mov	 edx, DWORD PTR x$[rsp]
  000a2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR listGenCode$[rsp]
  000a7	e8 00 00 00 00	 call	 simple_list_getlist
  000ac	48 89 44 24 30	 mov	 QWORD PTR list$[rsp], rax
; Line 158
  000b1	48 8b 44 24 30	 mov	 rax, QWORD PTR list$[rsp]
  000b6	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  000b9	89 44 24 2c	 mov	 DWORD PTR nCount2$[rsp], eax
; Line 159
  000bd	ba 01 00 00 00	 mov	 edx, 1
  000c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR list$[rsp]
  000c7	e8 00 00 00 00	 call	 simple_list_getitem
  000cc	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  000d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:SIMPLE_IC_OP
  000d7	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  000db	8b 54 24 24	 mov	 edx, DWORD PTR x$[rsp]
  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82629
  000e6	e8 00 00 00 00	 call	 printf
; Line 160
  000eb	83 7c 24 2c 01	 cmp	 DWORD PTR nCount2$[rsp], 1
  000f0	0f 8e ef 00 00
	00		 jle	 $LN10@simple_par
; Line 161
  000f6	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR y$[rsp], 2
  000fe	eb 0a		 jmp	 SHORT $LN9@simple_par
$LN8@simple_par:
  00100	8b 44 24 20	 mov	 eax, DWORD PTR y$[rsp]
  00104	ff c0		 inc	 eax
  00106	89 44 24 20	 mov	 DWORD PTR y$[rsp], eax
$LN9@simple_par:
  0010a	8b 44 24 2c	 mov	 eax, DWORD PTR nCount2$[rsp]
  0010e	39 44 24 20	 cmp	 DWORD PTR y$[rsp], eax
  00112	0f 8f cd 00 00
	00		 jg	 $LN7@simple_par
; Line 162
  00118	8b 54 24 20	 mov	 edx, DWORD PTR y$[rsp]
  0011c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR list$[rsp]
  00121	e8 00 00 00 00	 call	 simple_list_isstring
  00126	85 c0		 test	 eax, eax
  00128	74 26		 je	 SHORT $LN6@simple_par
; Line 163
  0012a	8b 54 24 20	 mov	 edx, DWORD PTR y$[rsp]
  0012e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR list$[rsp]
  00133	e8 00 00 00 00	 call	 simple_list_getitem
  00138	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0013c	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0013f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82635
  00146	e8 00 00 00 00	 call	 printf
  0014b	e9 90 00 00 00	 jmp	 $LN5@simple_par
$LN6@simple_par:
; Line 165
  00150	8b 54 24 20	 mov	 edx, DWORD PTR y$[rsp]
  00154	48 8b 4c 24 30	 mov	 rcx, QWORD PTR list$[rsp]
  00159	e8 00 00 00 00	 call	 simple_list_isnumber
  0015e	85 c0		 test	 eax, eax
  00160	74 60		 je	 SHORT $LN4@simple_par
; Line 166
  00162	8b 54 24 20	 mov	 edx, DWORD PTR y$[rsp]
  00166	48 8b 4c 24 30	 mov	 rcx, QWORD PTR list$[rsp]
  0016b	e8 00 00 00 00	 call	 simple_list_getitem
  00170	8b 00		 mov	 eax, DWORD PTR [rax]
  00172	c1 e8 03	 shr	 eax, 3
  00175	83 e0 03	 and	 eax, 3
  00178	83 f8 02	 cmp	 eax, 2
  0017b	75 26		 jne	 SHORT $LN3@simple_par
; Line 167
  0017d	8b 54 24 20	 mov	 edx, DWORD PTR y$[rsp]
  00181	48 8b 4c 24 30	 mov	 rcx, QWORD PTR list$[rsp]
  00186	e8 00 00 00 00	 call	 simple_list_getitem
  0018b	f2 0f 10 48 08	 movsdx	 xmm1, QWORD PTR [rax+8]
  00190	66 48 0f 7e ca	 movd	 rdx, xmm1
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82639
  0019c	e8 00 00 00 00	 call	 printf
; Line 168
  001a1	eb 1d		 jmp	 SHORT $LN2@simple_par
$LN3@simple_par:
; Line 169
  001a3	8b 54 24 20	 mov	 edx, DWORD PTR y$[rsp]
  001a7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR list$[rsp]
  001ac	e8 00 00 00 00	 call	 simple_list_getitem
  001b1	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  001b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82641
  001bb	e8 00 00 00 00	 call	 printf
$LN2@simple_par:
; Line 171
  001c0	eb 1e		 jmp	 SHORT $LN1@simple_par
$LN4@simple_par:
; Line 172
  001c2	8b 54 24 20	 mov	 edx, DWORD PTR y$[rsp]
  001c6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR list$[rsp]
  001cb	e8 00 00 00 00	 call	 simple_list_getitem
  001d0	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  001d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82643
  001db	e8 00 00 00 00	 call	 printf
$LN1@simple_par:
$LN5@simple_par:
; Line 174
  001e0	e9 1b ff ff ff	 jmp	 $LN8@simple_par
$LN7@simple_par:
$LN10@simple_par:
; Line 176
  001e5	e9 9c fe ff ff	 jmp	 $LN12@simple_par
$LN11@simple_par:
; Line 177
  001ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82644
  001f1	e8 00 00 00 00	 call	 printf
$LN14@simple_par:
; Line 180
  001f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82645
  001fd	e8 00 00 00 00	 call	 puts
; Line 181
  00202	e8 00 00 00 00	 call	 print_line
; Line 182
  00207	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82646
  0020e	e8 00 00 00 00	 call	 puts
; Line 183
  00213	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00217	c3		 ret	 0
simple_parser_icg_showoutput ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 48
list$ = 56
pValue$ = 64
simple_parser_icg_addoperandpointer PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_codegen.c
; Line 133
$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 135
  00013	4c 8b 44 24 40	 mov	 r8, QWORD PTR pValue$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR list$[rsp]
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00022	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00029	e8 00 00 00 00	 call	 simple_list_addpointer_gc
; Line 136
  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
simple_parser_icg_addoperandpointer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 48
list$ = 56
nValue$ = 64
simple_parser_icg_addoperandint PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_codegen.c
; Line 127
$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 129
  00013	44 8b 44 24 40	 mov	 r8d, DWORD PTR nValue$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR list$[rsp]
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00022	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00029	e8 00 00 00 00	 call	 simple_list_addint_gc
; Line 130
  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
simple_parser_icg_addoperandint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 48
list$ = 56
cStr$ = 64
simple_parser_icg_addoperand PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_codegen.c
; Line 121
$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 123
  00013	4c 8b 44 24 40	 mov	 r8, QWORD PTR cStr$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR list$[rsp]
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00022	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00029	e8 00 00 00 00	 call	 simple_list_addstring_gc
; Line 124
  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
simple_parser_icg_addoperand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 8
simple_parser_icg_getactiveoperation PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_codegen.c
; Line 107
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
; Line 110
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR parser$[rsp]
  0000a	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
; Line 111
  0000e	c3		 ret	 0
simple_parser_icg_getactiveoperation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 48
pValue$ = 56
simple_parser_icg_newoperandpointer PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_codegen.c
; Line 97
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 100
  0000e	4c 8b 44 24 38	 mov	 r8, QWORD PTR pValue$[rsp]
  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00018	48 8b 50 38	 mov	 rdx, QWORD PTR [rax+56]
  0001c	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00021	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00028	e8 00 00 00 00	 call	 simple_list_addpointer_gc
; Line 104
  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
simple_parser_icg_newoperandpointer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 48
nValue$ = 56
simple_parser_icg_newoperanddouble PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_codegen.c
; Line 87
$LN3:
  00000	f2 0f 11 4c 24
	10		 movsdx	 QWORD PTR [rsp+16], xmm1
  00006	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000b	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 90
  0000f	f2 0f 10 54 24
	38		 movsdx	 xmm2, QWORD PTR nValue$[rsp]
  00015	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  0001a	48 8b 50 38	 mov	 rdx, QWORD PTR [rax+56]
  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00023	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0002a	e8 00 00 00 00	 call	 simple_list_adddouble_gc
; Line 94
  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
simple_parser_icg_newoperanddouble ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 48
nValue$ = 56
simple_parser_icg_newoperandint PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_codegen.c
; Line 77
$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 80
  0000d	44 8b 44 24 38	 mov	 r8d, DWORD PTR nValue$[rsp]
  00012	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00017	48 8b 50 38	 mov	 rdx, QWORD PTR [rax+56]
  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00020	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00027	e8 00 00 00 00	 call	 simple_list_addint_gc
; Line 84
  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
simple_parser_icg_newoperandint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 48
cStr$ = 56
simple_parser_icg_newoperand PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_codegen.c
; Line 67
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 70
  0000e	4c 8b 44 24 38	 mov	 r8, QWORD PTR cStr$[rsp]
  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00018	48 8b 50 38	 mov	 rdx, QWORD PTR [rax+56]
  0001c	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00021	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00028	e8 00 00 00 00	 call	 simple_list_addstring_gc
; Line 74
  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
simple_parser_icg_newoperand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 48
opcode$ = 56
simple_parser_icg_newoperation PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_codegen.c
; Line 42
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 44
  0000d	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00012	0f be 40 6c	 movsx	 eax, BYTE PTR [rax+108]
  00016	83 f8 01	 cmp	 eax, 1
  00019	75 2b		 jne	 SHORT $LN1@simple_par
; Line 45
  0001b	44 8b 44 24 38	 mov	 r8d, DWORD PTR opcode$[rsp]
  00020	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00025	8b 50 70	 mov	 edx, DWORD PTR [rax+112]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR parser$[rsp]
  0002d	e8 00 00 00 00	 call	 simple_parser_icg_insertoperation
; Line 46
  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00037	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0003a	ff c0		 inc	 eax
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR parser$[rsp]
  00041	89 41 70	 mov	 DWORD PTR [rcx+112], eax
; Line 47
  00044	eb 42		 jmp	 SHORT $LN2@simple_par
$LN1@simple_par:
; Line 49
  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  0004b	48 8b 50 30	 mov	 rdx, QWORD PTR [rax+48]
  0004f	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00054	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0005b	e8 00 00 00 00	 call	 simple_list_newlist_gc
  00060	48 8b 4c 24 30	 mov	 rcx, QWORD PTR parser$[rsp]
  00065	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax
; Line 50
  00069	44 8b 44 24 38	 mov	 r8d, DWORD PTR opcode$[rsp]
  0006e	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00073	48 8b 50 38	 mov	 rdx, QWORD PTR [rax+56]
  00077	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  0007c	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00083	e8 00 00 00 00	 call	 simple_list_addint_gc
$LN2@simple_par:
; Line 54
  00088	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008c	c3		 ret	 0
simple_parser_icg_newoperation ENDP
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG82509 DB	0aH, 'Error (E2) : Out of Memory!', 0aH, 00H
	ORG $+2
$SG82592 DB	'-show-tokens', 00H
	ORG $+3
$SG82593 DB	'--k', 00H
$SG82598 DB	'--c', 00H
$SG82597 DB	'-case-insensitive', 00H
	ORG $+2
$SG82602 DB	'-error', 00H
	ORG $+1
$SG82603 DB	'--e', 00H
$SG82607 DB	'-license', 00H
	ORG $+3
$SG82608 DB	'--l', 00H
$SG82612 DB	'-help', 00H
	ORG $+2
$SG82613 DB	'--h', 00H
$SG82617 DB	'-about', 00H
	ORG $+1
$SG82618 DB	'--a', 00H
$SG82622 DB	'--s', 00H
$SG82627 DB	'--n', 00H
$SG82623 DB	'-simplify', 00H
	ORG $+2
$SG82632 DB	'--b', 00H
$SG82628 DB	'-no-run', 00H
$SG82633 DB	'-byte-code', 00H
	ORG $+1
$SG82637 DB	'--b-f', 00H
	ORG $+2
$SG82642 DB	'--t', 00H
$SG82638 DB	'-byte-code-final', 00H
	ORG $+3
$SG82643 DB	'-time', 00H
	ORG $+2
$SG82647 DB	'--i', 00H
$SG82648 DB	'-cgi', 00H
	ORG $+3
$SG82651 DB	'-rulesgfgdf', 00H
$SG82657 DB	'--w', 00H
$SG82654 DB	'-instteret', 00H
	ORG $+1
$SG82689 DB	'r', 00H
	ORG $+2
$SG82663 DB	'simple.sim', 00H
	ORG $+5
$SG82664 DB	'simple.sim', 00H
	ORG $+5
$SG82666 DB	'simple.complex', 00H
	ORG $+1
$SG82667 DB	'simple.complex', 00H
	ORG $+1
$SG82682 DB	'Content-Type: text/plain', 0aH, 0aH, 00H
	ORG $+5
$SG82683 DB	0aH, 'Error (E1) : Caught SegFault!', 0aH, 00H
$SG82684 DB	' : %d ', 00H
_DATA	ENDS
PUBLIC	simple_state_new
PUBLIC	finalize
PUBLIC	simple_state_cgiheader
PUBLIC	create_instance
PUBLIC	execute_code
PUBLIC	simple_state_findvar
PUBLIC	simple_state_newvar
PUBLIC	simple_state_main
PUBLIC	execute_simple_file
PUBLIC	simple_fexists
PUBLIC	simple_currentdir
PUBLIC	simple_exefilename
PUBLIC	simple_chdir
PUBLIC	simple_exefolder
PUBLIC	simple_distro_folder
PUBLIC	simple_switchtofilefolder
PUBLIC	simple_justfilepath
PUBLIC	simple_justfilename
PUBLIC	segfaultaction
EXTRN	__report_rangecheckfailure:PROC
EXTRN	_errno:PROC
EXTRN	exit:PROC
EXTRN	srand:PROC
EXTRN	fclose:PROC
EXTRN	fopen:PROC
EXTRN	printf:PROC
EXTRN	clock:PROC
EXTRN	_time64:PROC
EXTRN	strcpy:PROC
EXTRN	strcmp:PROC
EXTRN	strlen:PROC
EXTRN	signal:PROC
EXTRN	display_help:PROC
EXTRN	display_licence:PROC
EXTRN	display_about:PROC
EXTRN	is_simple_file:PROC
EXTRN	is_complex_file:PROC
EXTRN	simple_showtime:PROC
EXTRN	simple_list_delete_gc:PROC
EXTRN	simple_list_new:PROC
EXTRN	simple_list_delete:PROC
EXTRN	simple_list_addint:PROC
EXTRN	simple_scanner_readfile:PROC
EXTRN	simple_execute:PROC
EXTRN	simple_vm_delete:PROC
EXTRN	simple_vm_runcode:PROC
EXTRN	simple_vm_init:PROC
EXTRN	simple_vm_findvar:PROC
EXTRN	simple_vm_newvar:PROC
EXTRN	simple_malloc:PROC
EXTRN	simple_free:PROC
EXTRN	simple_poolmanager_delete:PROC
EXTRN	__imp_GetModuleFileNameA:PROC
EXTRN	_getcwd:PROC
EXTRN	chdir:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	NOT_CASE_SENSITIVE:DWORD
EXTRN	SKIP_ERROR:DWORD
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
nSimpleStateDEBUGSEGFAULT DD 01H DUP (?)
nSimpleStateCGI DD 01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$time DD	imagerel time
	DD	imagerel time+24
	DD	imagerel $unwind$time
$pdata$simple_state_new DD imagerel $LN4
	DD	imagerel $LN4+464
	DD	imagerel $unwind$simple_state_new
$pdata$finalize DD imagerel $LN7
	DD	imagerel $LN7+318
	DD	imagerel $unwind$finalize
$pdata$create_instance DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$create_instance
$pdata$execute_code DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$execute_code
$pdata$simple_state_findvar DD imagerel $LN4
	DD	imagerel $LN4+122
	DD	imagerel $unwind$simple_state_findvar
$pdata$simple_state_newvar DD imagerel $LN4
	DD	imagerel $LN4+128
	DD	imagerel $unwind$simple_state_newvar
$pdata$simple_state_main DD imagerel $LN56
	DD	imagerel $LN56+1918
	DD	imagerel $unwind$simple_state_main
$pdata$execute_simple_file DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$execute_simple_file
$pdata$simple_fexists DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$simple_fexists
$pdata$simple_currentdir DD imagerel $LN4
	DD	imagerel $LN4+69
	DD	imagerel $unwind$simple_currentdir
$pdata$simple_exefilename DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$simple_exefilename
$pdata$simple_chdir DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$simple_chdir
$pdata$simple_exefolder DD imagerel $LN13
	DD	imagerel $LN13+264
	DD	imagerel $unwind$simple_exefolder
$pdata$simple_distro_folder DD imagerel $LN16
	DD	imagerel $LN16+335
	DD	imagerel $unwind$simple_distro_folder
$pdata$simple_switchtofilefolder DD imagerel $LN4
	DD	imagerel $LN4+109
	DD	imagerel $unwind$simple_switchtofilefolder
$pdata$simple_justfilepath DD imagerel $LN8
	DD	imagerel $LN8+123
	DD	imagerel $unwind$simple_justfilepath
$pdata$simple_justfilename DD imagerel $LN11
	DD	imagerel $LN11+184
	DD	imagerel $unwind$simple_justfilename
$pdata$segfaultaction DD imagerel $LN5
	DD	imagerel $LN5+78
	DD	imagerel $unwind$segfaultaction
pdata	ENDS
xdata	SEGMENT
$unwind$time DD	010901H
	DD	04209H
$unwind$simple_state_new DD 010401H
	DD	06204H
$unwind$finalize DD 010901H
	DD	04209H
$unwind$create_instance DD 010401H
	DD	06204H
$unwind$execute_code DD 010e01H
	DD	0420eH
$unwind$simple_state_findvar DD 010e01H
	DD	0620eH
$unwind$simple_state_newvar DD 010e01H
	DD	0620eH
$unwind$simple_state_main DD 021001H
	DD	0170110H
$unwind$execute_simple_file DD 010e01H
	DD	0420eH
$unwind$simple_fexists DD 010901H
	DD	06209H
$unwind$simple_currentdir DD 010901H
	DD	06209H
$unwind$simple_exefilename DD 010901H
	DD	06209H
$unwind$simple_chdir DD 010901H
	DD	04209H
$unwind$simple_exefolder DD 021e19H
	DD	04b010cH
	DD	imagerel __GSHandlerCheck
	DD	0240H
$unwind$simple_distro_folder DD 021e19H
	DD	04d010cH
	DD	imagerel __GSHandlerCheck
	DD	0250H
$unwind$simple_switchtofilefolder DD 021e19H
	DD	027010cH
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$simple_justfilepath DD 010901H
	DD	06209H
$unwind$simple_justfilename DD 010901H
	DD	06209H
$unwind$segfaultaction DD 010801H
	DD	04208H
xdata	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sig$ = 48
segfaultaction PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_state.c
; Line 259
$LN5:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 260
  00008	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR nSimpleStateDEBUGSEGFAULT, 1
  0000f	75 31		 jne	 SHORT $LN2@segfaultac
; Line 261
  00011	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR nSimpleStateCGI, 1
  00018	75 0c		 jne	 SHORT $LN1@segfaultac
; Line 262
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82682
  00021	e8 00 00 00 00	 call	 printf
$LN1@segfaultac:
; Line 264
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82683
  0002d	e8 00 00 00 00	 call	 printf
; Line 265
  00032	8b 54 24 30	 mov	 edx, DWORD PTR sig$[rsp]
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82684
  0003d	e8 00 00 00 00	 call	 printf
$LN2@segfaultac:
; Line 267
  00042	33 c9		 xor	 ecx, ecx
  00044	e8 00 00 00 00	 call	 exit
$LN4@segfaultac:
; Line 268
  00049	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004d	c3		 ret	 0
segfaultaction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 32
r$ = 36
nSize$ = 40
file_name$ = 64
simple_justfilename PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_state.c
; Line 382
$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
; Line 384
  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR file_name$[rsp]
  0000e	e8 00 00 00 00	 call	 strlen
  00013	89 44 24 28	 mov	 DWORD PTR nSize$[rsp], eax
; Line 385
  00017	8b 44 24 28	 mov	 eax, DWORD PTR nSize$[rsp]
  0001b	ff c8		 dec	 eax
  0001d	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax
  00021	eb 0a		 jmp	 SHORT $LN8@simple_jus
$LN7@simple_jus:
  00023	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  00027	ff c8		 dec	 eax
  00029	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax
$LN8@simple_jus:
  0002d	83 7c 24 20 00	 cmp	 DWORD PTR x$[rsp], 0
  00032	7c 7f		 jl	 SHORT $LN6@simple_jus
; Line 386
  00034	48 63 44 24 20	 movsxd	 rax, DWORD PTR x$[rsp]
  00039	48 8b 4c 24 40	 mov	 rcx, QWORD PTR file_name$[rsp]
  0003e	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00042	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  00045	74 13		 je	 SHORT $LN4@simple_jus
  00047	48 63 44 24 20	 movsxd	 rax, DWORD PTR x$[rsp]
  0004c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR file_name$[rsp]
  00051	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00055	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00058	75 54		 jne	 SHORT $LN5@simple_jus
$LN4@simple_jus:
; Line 387
  0005a	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR r$[rsp], 0
; Line 388
  00062	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  00066	ff c0		 inc	 eax
  00068	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax
  0006c	eb 0a		 jmp	 SHORT $LN3@simple_jus
$LN2@simple_jus:
  0006e	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  00072	ff c0		 inc	 eax
  00074	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax
$LN3@simple_jus:
  00078	8b 44 24 28	 mov	 eax, DWORD PTR nSize$[rsp]
  0007c	ff c0		 inc	 eax
  0007e	39 44 24 20	 cmp	 DWORD PTR x$[rsp], eax
  00082	7f 28		 jg	 SHORT $LN1@simple_jus
; Line 389
  00084	48 63 44 24 20	 movsxd	 rax, DWORD PTR x$[rsp]
  00089	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR r$[rsp]
  0008e	48 8b 54 24 40	 mov	 rdx, QWORD PTR file_name$[rsp]
  00093	4c 8b 44 24 40	 mov	 r8, QWORD PTR file_name$[rsp]
  00098	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  0009d	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
; Line 390
  000a0	8b 44 24 24	 mov	 eax, DWORD PTR r$[rsp]
  000a4	ff c0		 inc	 eax
  000a6	89 44 24 24	 mov	 DWORD PTR r$[rsp], eax
; Line 391
  000aa	eb c2		 jmp	 SHORT $LN2@simple_jus
$LN1@simple_jus:
; Line 392
  000ac	eb 05		 jmp	 SHORT $LN6@simple_jus
$LN5@simple_jus:
; Line 394
  000ae	e9 70 ff ff ff	 jmp	 $LN7@simple_jus
$LN6@simple_jus:
; Line 395
  000b3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b7	c3		 ret	 0
simple_justfilename ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 32
nSize$ = 36
file_name$ = 64
simple_justfilepath PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_state.c
; Line 369
$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
; Line 371
  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR file_name$[rsp]
  0000e	e8 00 00 00 00	 call	 strlen
  00013	89 44 24 24	 mov	 DWORD PTR nSize$[rsp], eax
; Line 372
  00017	8b 44 24 24	 mov	 eax, DWORD PTR nSize$[rsp]
  0001b	ff c8		 dec	 eax
  0001d	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax
  00021	eb 0a		 jmp	 SHORT $LN5@simple_jus
$LN4@simple_jus:
  00023	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  00027	ff c8		 dec	 eax
  00029	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax
$LN5@simple_jus:
  0002d	83 7c 24 20 00	 cmp	 DWORD PTR x$[rsp], 0
  00032	7c 40		 jl	 SHORT $LN3@simple_jus
; Line 373
  00034	48 63 44 24 20	 movsxd	 rax, DWORD PTR x$[rsp]
  00039	48 8b 4c 24 40	 mov	 rcx, QWORD PTR file_name$[rsp]
  0003e	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00042	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  00045	74 13		 je	 SHORT $LN1@simple_jus
  00047	48 63 44 24 20	 movsxd	 rax, DWORD PTR x$[rsp]
  0004c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR file_name$[rsp]
  00051	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00055	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00058	75 18		 jne	 SHORT $LN2@simple_jus
$LN1@simple_jus:
; Line 374
  0005a	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  0005e	ff c0		 inc	 eax
  00060	48 98		 cdqe
  00062	48 8b 4c 24 40	 mov	 rcx, QWORD PTR file_name$[rsp]
  00067	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
; Line 375
  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	eb 04		 jmp	 SHORT $LN6@simple_jus
$LN2@simple_jus:
; Line 377
  00072	eb af		 jmp	 SHORT $LN4@simple_jus
$LN3@simple_jus:
; Line 378
  00074	33 c0		 xor	 eax, eax
$LN6@simple_jus:
; Line 379
  00076	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007a	c3		 ret	 0
simple_justfilepath ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file_name_two$ = 32
__$ArrayPad$ = 288
file_name$ = 320
simple_switchtofilefolder PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_state.c
; Line 357
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 359
  0001e	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR file_name$[rsp]
  00026	48 8d 4c 24 20	 lea	 rcx, QWORD PTR file_name_two$[rsp]
  0002b	e8 00 00 00 00	 call	 strcpy
; Line 360
  00030	48 8d 4c 24 20	 lea	 rcx, QWORD PTR file_name_two$[rsp]
  00035	e8 00 00 00 00	 call	 simple_justfilepath
  0003a	85 c0		 test	 eax, eax
  0003c	74 17		 je	 SHORT $LN1@simple_swi
; Line 361
  0003e	48 8d 4c 24 20	 lea	 rcx, QWORD PTR file_name_two$[rsp]
  00043	e8 00 00 00 00	 call	 simple_chdir
; Line 363
  00048	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR file_name$[rsp]
  00050	e8 00 00 00 00	 call	 simple_justfilename
$LN1@simple_swi:
; Line 366
  00055	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0005d	48 33 cc	 xor	 rcx, rsp
  00060	e8 00 00 00 00	 call	 __security_check_cookie
  00065	48 81 c4 38 01
	00 00		 add	 rsp, 312		; 00000138H
  0006c	c3		 ret	 0
simple_switchtofilefolder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 32
x2$ = 36
nSize$ = 40
$T1 = 48
$T2 = 56
$T3 = 64
cDir2$ = 80
cDir$ = 336
__$ArrayPad$ = 592
dirPath$ = 624
simple_distro_folder PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_state.c
; Line 338
$LN16:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 68 02
	00 00		 sub	 rsp, 616		; 00000268H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 342
  0001e	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR cDir$[rsp]
  00026	e8 00 00 00 00	 call	 simple_exefilename
; Line 343
  0002b	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR cDir$[rsp]
  00033	e8 00 00 00 00	 call	 strlen
  00038	89 44 24 28	 mov	 DWORD PTR nSize$[rsp], eax
; Line 344
  0003c	8b 44 24 28	 mov	 eax, DWORD PTR nSize$[rsp]
  00040	ff c8		 dec	 eax
  00042	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax
  00046	eb 0a		 jmp	 SHORT $LN7@simple_dis
$LN6@simple_dis:
  00048	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  0004c	ff c8		 dec	 eax
  0004e	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax
$LN7@simple_dis:
  00052	83 7c 24 20 00	 cmp	 DWORD PTR x$[rsp], 0
  00057	0f 8c c8 00 00
	00		 jl	 $LN5@simple_dis
; Line 345
  0005d	48 63 44 24 20	 movsxd	 rax, DWORD PTR x$[rsp]
  00062	0f be 84 04 50
	01 00 00	 movsx	 eax, BYTE PTR cDir$[rsp+rax]
  0006a	83 f8 62	 cmp	 eax, 98			; 00000062H
  0006d	0f 85 ad 00 00
	00		 jne	 $LN4@simple_dis
; Line 346
  00073	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  00077	89 44 24 24	 mov	 DWORD PTR x2$[rsp], eax
  0007b	eb 0a		 jmp	 SHORT $LN3@simple_dis
$LN2@simple_dis:
  0007d	8b 44 24 24	 mov	 eax, DWORD PTR x2$[rsp]
  00081	ff c8		 dec	 eax
  00083	89 44 24 24	 mov	 DWORD PTR x2$[rsp], eax
$LN3@simple_dis:
  00087	83 7c 24 24 00	 cmp	 DWORD PTR x2$[rsp], 0
  0008c	7c 18		 jl	 SHORT $LN1@simple_dis
; Line 347
  0008e	48 63 44 24 24	 movsxd	 rax, DWORD PTR x2$[rsp]
  00093	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR x2$[rsp]
  00098	0f b6 84 04 50
	01 00 00	 movzx	 eax, BYTE PTR cDir$[rsp+rax]
  000a0	88 44 0c 50	 mov	 BYTE PTR cDir2$[rsp+rcx], al
; Line 348
  000a4	eb d7		 jmp	 SHORT $LN2@simple_dis
$LN1@simple_dis:
; Line 349
  000a6	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  000aa	ff c8		 dec	 eax
  000ac	48 98		 cdqe
  000ae	48 89 44 24 30	 mov	 QWORD PTR $T1[rsp], rax
  000b3	48 81 7c 24 30
	00 01 00 00	 cmp	 QWORD PTR $T1[rsp], 256	; 00000100H
  000bc	73 02		 jae	 SHORT $LN10@simple_dis
  000be	eb 05		 jmp	 SHORT $LN11@simple_dis
$LN10@simple_dis:
  000c0	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN11@simple_dis:
  000c5	48 8b 44 24 30	 mov	 rax, QWORD PTR $T1[rsp]
  000ca	c6 44 04 50 00	 mov	 BYTE PTR cDir2$[rsp+rax], 0
  000cf	48 63 44 24 20	 movsxd	 rax, DWORD PTR x$[rsp]
  000d4	48 89 44 24 40	 mov	 QWORD PTR $T3[rsp], rax
  000d9	48 81 7c 24 40
	00 01 00 00	 cmp	 QWORD PTR $T3[rsp], 256	; 00000100H
  000e2	73 02		 jae	 SHORT $LN12@simple_dis
  000e4	eb 05		 jmp	 SHORT $LN13@simple_dis
$LN12@simple_dis:
  000e6	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN13@simple_dis:
  000eb	48 8b 44 24 40	 mov	 rax, QWORD PTR $T3[rsp]
  000f0	c6 44 04 50 00	 mov	 BYTE PTR cDir2$[rsp+rax], 0
  000f5	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  000f9	ff c0		 inc	 eax
  000fb	48 98		 cdqe
  000fd	48 89 44 24 38	 mov	 QWORD PTR $T2[rsp], rax
  00102	48 81 7c 24 38
	00 01 00 00	 cmp	 QWORD PTR $T2[rsp], 256	; 00000100H
  0010b	73 02		 jae	 SHORT $LN14@simple_dis
  0010d	eb 05		 jmp	 SHORT $LN15@simple_dis
$LN14@simple_dis:
  0010f	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN15@simple_dis:
  00114	48 8b 44 24 38	 mov	 rax, QWORD PTR $T2[rsp]
  00119	c6 44 04 50 00	 mov	 BYTE PTR cDir2$[rsp+rax], 0
; Line 350
  0011e	eb 05		 jmp	 SHORT $LN5@simple_dis
$LN4@simple_dis:
; Line 352
  00120	e9 23 ff ff ff	 jmp	 $LN6@simple_dis
$LN5@simple_dis:
; Line 353
  00125	48 8d 54 24 50	 lea	 rdx, QWORD PTR cDir2$[rsp]
  0012a	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR dirPath$[rsp]
  00132	e8 00 00 00 00	 call	 strcpy
$LN9@simple_dis:
; Line 354
  00137	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0013f	48 33 cc	 xor	 rcx, rsp
  00142	e8 00 00 00 00	 call	 __security_check_cookie
  00147	48 81 c4 68 02
	00 00		 add	 rsp, 616		; 00000268H
  0014e	c3		 ret	 0
simple_distro_folder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 32
x2$ = 36
nSize$ = 40
$T1 = 48
cDir$ = 64
cDir2$ = 320
__$ArrayPad$ = 576
cDirPath$ = 608
simple_exefolder PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_state.c
; Line 320
$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 58 02
	00 00		 sub	 rsp, 600		; 00000258H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 324
  0001e	48 8d 4c 24 40	 lea	 rcx, QWORD PTR cDir$[rsp]
  00023	e8 00 00 00 00	 call	 simple_exefilename
; Line 325
  00028	48 8d 4c 24 40	 lea	 rcx, QWORD PTR cDir$[rsp]
  0002d	e8 00 00 00 00	 call	 strlen
  00032	89 44 24 28	 mov	 DWORD PTR nSize$[rsp], eax
; Line 326
  00036	8b 44 24 28	 mov	 eax, DWORD PTR nSize$[rsp]
  0003a	ff c8		 dec	 eax
  0003c	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax
  00040	eb 0a		 jmp	 SHORT $LN8@simple_exe
$LN7@simple_exe:
  00042	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  00046	ff c8		 dec	 eax
  00048	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax
$LN8@simple_exe:
  0004c	83 7c 24 20 00	 cmp	 DWORD PTR x$[rsp], 0
  00051	0f 8c 84 00 00
	00		 jl	 $LN6@simple_exe
; Line 327
  00057	48 63 44 24 20	 movsxd	 rax, DWORD PTR x$[rsp]
  0005c	0f be 44 04 40	 movsx	 eax, BYTE PTR cDir$[rsp+rax]
  00061	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  00064	74 0f		 je	 SHORT $LN4@simple_exe
  00066	48 63 44 24 20	 movsxd	 rax, DWORD PTR x$[rsp]
  0006b	0f be 44 04 40	 movsx	 eax, BYTE PTR cDir$[rsp+rax]
  00070	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00073	75 61		 jne	 SHORT $LN5@simple_exe
$LN4@simple_exe:
; Line 328
  00075	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  00079	89 44 24 24	 mov	 DWORD PTR x2$[rsp], eax
  0007d	eb 0a		 jmp	 SHORT $LN3@simple_exe
$LN2@simple_exe:
  0007f	8b 44 24 24	 mov	 eax, DWORD PTR x2$[rsp]
  00083	ff c8		 dec	 eax
  00085	89 44 24 24	 mov	 DWORD PTR x2$[rsp], eax
$LN3@simple_exe:
  00089	83 7c 24 24 00	 cmp	 DWORD PTR x2$[rsp], 0
  0008e	7c 18		 jl	 SHORT $LN1@simple_exe
; Line 329
  00090	48 63 44 24 24	 movsxd	 rax, DWORD PTR x2$[rsp]
  00095	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR x2$[rsp]
  0009a	0f b6 44 04 40	 movzx	 eax, BYTE PTR cDir$[rsp+rax]
  0009f	88 84 0c 40 01
	00 00		 mov	 BYTE PTR cDir2$[rsp+rcx], al
; Line 330
  000a6	eb d7		 jmp	 SHORT $LN2@simple_exe
$LN1@simple_exe:
; Line 331
  000a8	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  000ac	ff c0		 inc	 eax
  000ae	48 98		 cdqe
  000b0	48 89 44 24 30	 mov	 QWORD PTR $T1[rsp], rax
  000b5	48 81 7c 24 30
	00 01 00 00	 cmp	 QWORD PTR $T1[rsp], 256	; 00000100H
  000be	73 02		 jae	 SHORT $LN11@simple_exe
  000c0	eb 05		 jmp	 SHORT $LN12@simple_exe
$LN11@simple_exe:
  000c2	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN12@simple_exe:
  000c7	48 8b 44 24 30	 mov	 rax, QWORD PTR $T1[rsp]
  000cc	c6 84 04 40 01
	00 00 00	 mov	 BYTE PTR cDir2$[rsp+rax], 0
; Line 332
  000d4	eb 05		 jmp	 SHORT $LN6@simple_exe
$LN5@simple_exe:
; Line 334
  000d6	e9 67 ff ff ff	 jmp	 $LN7@simple_exe
$LN6@simple_exe:
; Line 335
  000db	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR cDir2$[rsp]
  000e3	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR cDirPath$[rsp]
  000eb	e8 00 00 00 00	 call	 strcpy
$LN10@simple_exe:
; Line 336
  000f0	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f8	48 33 cc	 xor	 rcx, rsp
  000fb	e8 00 00 00 00	 call	 __security_check_cookie
  00100	48 81 c4 58 02
	00 00		 add	 rsp, 600		; 00000258H
  00107	c3		 ret	 0
simple_exefolder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cDir$ = 48
simple_chdir PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_state.c
; Line 315
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 316
  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cDir$[rsp]
  0000e	e8 00 00 00 00	 call	 chdir
; Line 317
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
simple_chdir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
nSize$ = 32
cDirPath$ = 64
simple_exefilename PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_state.c
; Line 295
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
; Line 297
  00009	c7 44 24 20 00
	01 00 00	 mov	 DWORD PTR nSize$[rsp], 256 ; 00000100H
; Line 300
  00011	44 8b 44 24 20	 mov	 r8d, DWORD PTR nSize$[rsp]
  00016	48 8b 54 24 40	 mov	 rdx, QWORD PTR cDirPath$[rsp]
  0001b	33 c9		 xor	 ecx, ecx
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleFileNameA
; Line 311
  00023	b8 01 00 00 00	 mov	 eax, 1
; Line 312
  00028	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0002c	c3		 ret	 0
simple_exefilename ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
nSize$ = 32
cDirPath$ = 64
simple_currentdir PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_state.c
; Line 284
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
; Line 286
  00009	c7 44 24 20 00
	01 00 00	 mov	 DWORD PTR nSize$[rsp], 256 ; 00000100H
; Line 287
  00011	8b 54 24 20	 mov	 edx, DWORD PTR nSize$[rsp]
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR cDirPath$[rsp]
  0001a	e8 00 00 00 00	 call	 _getcwd
  0001f	48 85 c0	 test	 rax, rax
  00022	75 09		 jne	 SHORT $LN1@simple_cur
; Line 288
  00024	e8 00 00 00 00	 call	 _errno
  00029	8b 00		 mov	 eax, DWORD PTR [rax]
  0002b	eb 13		 jmp	 SHORT $LN2@simple_cur
$LN1@simple_cur:
; Line 290
  0002d	8b 44 24 20	 mov	 eax, DWORD PTR nSize$[rsp]
  00031	ff c8		 dec	 eax
  00033	48 98		 cdqe
  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR cDirPath$[rsp]
  0003a	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
; Line 291
  0003e	33 c0		 xor	 eax, eax
$LN2@simple_cur:
; Line 292
  00040	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00044	c3		 ret	 0
simple_currentdir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fp$ = 32
file_name$ = 64
simple_fexists PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_state.c
; Line 273
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
; Line 275
  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82689
  00010	48 8b 4c 24 40	 mov	 rcx, QWORD PTR file_name$[rsp]
  00015	e8 00 00 00 00	 call	 fopen
  0001a	48 89 44 24 20	 mov	 QWORD PTR fp$[rsp], rax
; Line 276
  0001f	48 83 7c 24 20
	00		 cmp	 QWORD PTR fp$[rsp], 0
  00025	74 11		 je	 SHORT $LN1@simple_fex
; Line 277
  00027	48 8b 4c 24 20	 mov	 rcx, QWORD PTR fp$[rsp]
  0002c	e8 00 00 00 00	 call	 fclose
; Line 278
  00031	b8 01 00 00 00	 mov	 eax, 1
  00036	eb 02		 jmp	 SHORT $LN2@simple_fex
$LN1@simple_fex:
; Line 280
  00038	33 c0		 xor	 eax, eax
$LN2@simple_fex:
; Line 281
  0003a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003e	c3		 ret	 0
simple_fexists ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sState$ = 48
file_name$ = 56
execute_simple_file PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_state.c
; Line 241
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 242
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR file_name$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sState$[rsp]
  00018	e8 00 00 00 00	 call	 simple_scanner_readfile
; Line 243
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
execute_simple_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 96
nRun$ = 100
nPrintICFinal$ = 104
nPrintIC$ = 108
nCGI$ = 112
nIns$ = 116
nWarn$ = 120
nGenObj$ = 124
nTokens$ = 128
nRules$ = 132
nSRC$ = 136
show_time$ = 140
before_execution$ = 144
cStr$ = 152
after_execution$ = 160
argc$ = 192
argv$ = 200
simple_state_main PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_state.c
; Line 151
$LN56:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
; Line 155
  00010	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR nCGI$[rsp], 0
; Line 156
  00018	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR nRun$[rsp], 1
; Line 157
  00020	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR nPrintIC$[rsp], 0
; Line 158
  00028	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR nPrintICFinal$[rsp], 0
; Line 159
  00030	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR nTokens$[rsp], 0
; Line 160
  0003b	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR nRules$[rsp], 0
; Line 161
  00046	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR nIns$[rsp], 0
; Line 162
  0004e	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR show_time$[rsp], 0
; Line 163
  00059	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR cStr$[rsp], 0
; Line 164
  00065	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR nSRC$[rsp], 0
; Line 165
  00070	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR nGenObj$[rsp], 0
; Line 166
  00078	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR nWarn$[rsp], 0
; Line 167
  00080	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR nSimpleStateDEBUGSEGFAULT, 0
; Line 168
  0008a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR nSimpleStateCGI, 0
; Line 169
  00094	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:segfaultaction
  0009b	b9 0b 00 00 00	 mov	 ecx, 11
  000a0	e8 00 00 00 00	 call	 signal
; Line 170
  000a5	e8 00 00 00 00	 call	 clock
  000aa	89 84 24 90 00
	00 00		 mov	 DWORD PTR before_execution$[rsp], eax
; Line 174
  000b1	83 bc 24 c0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  000b9	0f 8e f7 04 00
	00		 jle	 $LN53@simple_sta
; Line 175
  000bf	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR x$[rsp], 1
  000c7	eb 0a		 jmp	 SHORT $LN52@simple_sta
$LN51@simple_sta:
  000c9	8b 44 24 60	 mov	 eax, DWORD PTR x$[rsp]
  000cd	ff c0		 inc	 eax
  000cf	89 44 24 60	 mov	 DWORD PTR x$[rsp], eax
$LN52@simple_sta:
  000d3	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  000da	39 44 24 60	 cmp	 DWORD PTR x$[rsp], eax
  000de	0f 8d d2 04 00
	00		 jge	 $LN50@simple_sta
; Line 176
  000e4	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  000e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82592
  000f0	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000f8	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  000fc	e8 00 00 00 00	 call	 strcmp
  00101	85 c0		 test	 eax, eax
  00103	74 21		 je	 SHORT $LN48@simple_sta
  00105	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  0010a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82593
  00111	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00119	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0011d	e8 00 00 00 00	 call	 strcmp
  00122	85 c0		 test	 eax, eax
  00124	75 10		 jne	 SHORT $LN49@simple_sta
$LN48@simple_sta:
; Line 177
  00126	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR nTokens$[rsp], 1
  00131	e9 7b 04 00 00	 jmp	 $LN47@simple_sta
$LN49@simple_sta:
; Line 178
  00136	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  0013b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82597
  00142	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0014a	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0014e	e8 00 00 00 00	 call	 strcmp
  00153	85 c0		 test	 eax, eax
  00155	74 21		 je	 SHORT $LN45@simple_sta
  00157	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  0015c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82598
  00163	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0016b	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0016f	e8 00 00 00 00	 call	 strcmp
  00174	85 c0		 test	 eax, eax
  00176	75 0f		 jne	 SHORT $LN46@simple_sta
$LN45@simple_sta:
; Line 179
  00178	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR NOT_CASE_SENSITIVE, 1
  00182	e9 2a 04 00 00	 jmp	 $LN44@simple_sta
$LN46@simple_sta:
; Line 180
  00187	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  0018c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82602
  00193	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0019b	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0019f	e8 00 00 00 00	 call	 strcmp
  001a4	85 c0		 test	 eax, eax
  001a6	74 21		 je	 SHORT $LN42@simple_sta
  001a8	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  001ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82603
  001b4	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001bc	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  001c0	e8 00 00 00 00	 call	 strcmp
  001c5	85 c0		 test	 eax, eax
  001c7	75 0f		 jne	 SHORT $LN43@simple_sta
$LN42@simple_sta:
; Line 181
  001c9	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR SKIP_ERROR, 1
  001d3	e9 d9 03 00 00	 jmp	 $LN41@simple_sta
$LN43@simple_sta:
; Line 182
  001d8	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  001dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82607
  001e4	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001ec	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  001f0	e8 00 00 00 00	 call	 strcmp
  001f5	85 c0		 test	 eax, eax
  001f7	74 21		 je	 SHORT $LN39@simple_sta
  001f9	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  001fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82608
  00205	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0020d	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00211	e8 00 00 00 00	 call	 strcmp
  00216	85 c0		 test	 eax, eax
  00218	75 0a		 jne	 SHORT $LN40@simple_sta
$LN39@simple_sta:
; Line 183
  0021a	e8 00 00 00 00	 call	 display_licence
  0021f	e9 8d 03 00 00	 jmp	 $LN38@simple_sta
$LN40@simple_sta:
; Line 184
  00224	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  00229	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82612
  00230	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00238	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0023c	e8 00 00 00 00	 call	 strcmp
  00241	85 c0		 test	 eax, eax
  00243	74 21		 je	 SHORT $LN36@simple_sta
  00245	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  0024a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82613
  00251	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00259	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0025d	e8 00 00 00 00	 call	 strcmp
  00262	85 c0		 test	 eax, eax
  00264	75 0a		 jne	 SHORT $LN37@simple_sta
$LN36@simple_sta:
; Line 185
  00266	e8 00 00 00 00	 call	 display_help
  0026b	e9 41 03 00 00	 jmp	 $LN35@simple_sta
$LN37@simple_sta:
; Line 186
  00270	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  00275	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82617
  0027c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00284	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00288	e8 00 00 00 00	 call	 strcmp
  0028d	85 c0		 test	 eax, eax
  0028f	74 21		 je	 SHORT $LN33@simple_sta
  00291	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  00296	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82618
  0029d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002a5	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  002a9	e8 00 00 00 00	 call	 strcmp
  002ae	85 c0		 test	 eax, eax
  002b0	75 0a		 jne	 SHORT $LN34@simple_sta
$LN33@simple_sta:
; Line 187
  002b2	e8 00 00 00 00	 call	 display_about
  002b7	e9 f5 02 00 00	 jmp	 $LN32@simple_sta
$LN34@simple_sta:
; Line 188
  002bc	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  002c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82622
  002c8	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002d0	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  002d4	e8 00 00 00 00	 call	 strcmp
  002d9	85 c0		 test	 eax, eax
  002db	74 21		 je	 SHORT $LN30@simple_sta
  002dd	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  002e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82623
  002e9	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002f1	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  002f5	e8 00 00 00 00	 call	 strcmp
  002fa	85 c0		 test	 eax, eax
  002fc	75 15		 jne	 SHORT $LN31@simple_sta
$LN30@simple_sta:
; Line 189
  002fe	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR nGenObj$[rsp], 1
  00306	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR nRun$[rsp], 0
  0030e	e9 9e 02 00 00	 jmp	 $LN29@simple_sta
$LN31@simple_sta:
; Line 190
  00313	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  00318	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82627
  0031f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00327	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0032b	e8 00 00 00 00	 call	 strcmp
  00330	85 c0		 test	 eax, eax
  00332	74 21		 je	 SHORT $LN27@simple_sta
  00334	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  00339	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82628
  00340	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00348	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0034c	e8 00 00 00 00	 call	 strcmp
  00351	85 c0		 test	 eax, eax
  00353	75 0d		 jne	 SHORT $LN28@simple_sta
$LN27@simple_sta:
; Line 191
  00355	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR nRun$[rsp], 0
  0035d	e9 4f 02 00 00	 jmp	 $LN26@simple_sta
$LN28@simple_sta:
; Line 192
  00362	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  00367	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82632
  0036e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00376	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0037a	e8 00 00 00 00	 call	 strcmp
  0037f	85 c0		 test	 eax, eax
  00381	74 21		 je	 SHORT $LN24@simple_sta
  00383	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  00388	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82633
  0038f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00397	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0039b	e8 00 00 00 00	 call	 strcmp
  003a0	85 c0		 test	 eax, eax
  003a2	75 15		 jne	 SHORT $LN25@simple_sta
$LN24@simple_sta:
; Line 193
  003a4	c7 44 24 6c 01
	00 00 00	 mov	 DWORD PTR nPrintIC$[rsp], 1
  003ac	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR nRun$[rsp], 0
  003b4	e9 f8 01 00 00	 jmp	 $LN23@simple_sta
$LN25@simple_sta:
; Line 194
  003b9	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  003be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82637
  003c5	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003cd	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  003d1	e8 00 00 00 00	 call	 strcmp
  003d6	85 c0		 test	 eax, eax
  003d8	74 21		 je	 SHORT $LN21@simple_sta
  003da	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  003df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82638
  003e6	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003ee	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  003f2	e8 00 00 00 00	 call	 strcmp
  003f7	85 c0		 test	 eax, eax
  003f9	75 15		 jne	 SHORT $LN22@simple_sta
$LN21@simple_sta:
; Line 195
  003fb	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR nPrintICFinal$[rsp], 1
  00403	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR nRun$[rsp], 0
  0040b	e9 a1 01 00 00	 jmp	 $LN20@simple_sta
$LN22@simple_sta:
; Line 196
  00410	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  00415	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82642
  0041c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00424	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00428	e8 00 00 00 00	 call	 strcmp
  0042d	85 c0		 test	 eax, eax
  0042f	74 21		 je	 SHORT $LN18@simple_sta
  00431	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  00436	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82643
  0043d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00445	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00449	e8 00 00 00 00	 call	 strcmp
  0044e	85 c0		 test	 eax, eax
  00450	75 10		 jne	 SHORT $LN19@simple_sta
$LN18@simple_sta:
; Line 197
  00452	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR show_time$[rsp], 1
  0045d	e9 4f 01 00 00	 jmp	 $LN17@simple_sta
$LN19@simple_sta:
; Line 198
  00462	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  00467	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82647
  0046e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00476	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0047a	e8 00 00 00 00	 call	 strcmp
  0047f	85 c0		 test	 eax, eax
  00481	74 21		 je	 SHORT $LN15@simple_sta
  00483	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  00488	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82648
  0048f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00497	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0049b	e8 00 00 00 00	 call	 strcmp
  004a0	85 c0		 test	 eax, eax
  004a2	75 17		 jne	 SHORT $LN16@simple_sta
$LN15@simple_sta:
; Line 199
  004a4	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR nCGI$[rsp], 1
  004ac	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR nSimpleStateCGI, 1
  004b6	e9 f6 00 00 00	 jmp	 $LN14@simple_sta
$LN16@simple_sta:
; Line 202
  004bb	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  004c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82651
  004c7	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004cf	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  004d3	e8 00 00 00 00	 call	 strcmp
  004d8	85 c0		 test	 eax, eax
  004da	75 10		 jne	 SHORT $LN13@simple_sta
; Line 203
  004dc	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR nRules$[rsp], 1
  004e7	e9 c5 00 00 00	 jmp	 $LN12@simple_sta
$LN13@simple_sta:
; Line 205
  004ec	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  004f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82654
  004f8	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00500	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00504	e8 00 00 00 00	 call	 strcmp
  00509	85 c0		 test	 eax, eax
  0050b	75 0d		 jne	 SHORT $LN11@simple_sta
; Line 206
  0050d	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR nIns$[rsp], 1
  00515	e9 97 00 00 00	 jmp	 $LN10@simple_sta
$LN11@simple_sta:
; Line 208
  0051a	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  0051f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG82657
  00526	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0052e	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00532	e8 00 00 00 00	 call	 strcmp
  00537	85 c0		 test	 eax, eax
  00539	75 14		 jne	 SHORT $LN9@simple_sta
; Line 209
  0053b	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR nWarn$[rsp], 1
; Line 210
  00543	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR nSimpleStateDEBUGSEGFAULT, 1
  0054d	eb 62		 jmp	 SHORT $LN8@simple_sta
$LN9@simple_sta:
; Line 212
  0054f	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  00554	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0055c	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00560	e8 00 00 00 00	 call	 is_simple_file
  00565	85 c0		 test	 eax, eax
  00567	75 1a		 jne	 SHORT $LN6@simple_sta
  00569	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  0056e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00576	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0057a	e8 00 00 00 00	 call	 is_complex_file
  0057f	85 c0		 test	 eax, eax
  00581	74 2e		 je	 SHORT $LN7@simple_sta
$LN6@simple_sta:
  00583	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR nSRC$[rsp], 0
  0058b	75 24		 jne	 SHORT $LN7@simple_sta
; Line 213
  0058d	48 63 44 24 60	 movsxd	 rax, DWORD PTR x$[rsp]
  00592	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0059a	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0059e	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR cStr$[rsp], rax
; Line 214
  005a6	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR nSRC$[rsp], 1
$LN7@simple_sta:
$LN8@simple_sta:
$LN10@simple_sta:
$LN12@simple_sta:
$LN14@simple_sta:
$LN17@simple_sta:
$LN20@simple_sta:
$LN23@simple_sta:
$LN26@simple_sta:
$LN29@simple_sta:
$LN32@simple_sta:
$LN35@simple_sta:
$LN38@simple_sta:
$LN41@simple_sta:
$LN44@simple_sta:
$LN47@simple_sta:
; Line 216
  005b1	e9 13 fb ff ff	 jmp	 $LN51@simple_sta
$LN50@simple_sta:
$LN53@simple_sta:
; Line 218
  005b6	33 c9		 xor	 ecx, ecx
  005b8	e8 00 00 00 00	 call	 time
  005bd	8b c8		 mov	 ecx, eax
  005bf	e8 00 00 00 00	 call	 srand
; Line 220
  005c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82663
  005cb	e8 00 00 00 00	 call	 simple_fexists
  005d0	85 c0		 test	 eax, eax
  005d2	74 79		 je	 SHORT $LN5@simple_sta
  005d4	83 bc 24 c0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  005dc	75 6f		 jne	 SHORT $LN5@simple_sta
; Line 221
  005de	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  005e6	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  005eb	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  005f2	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  005f6	8b 44 24 78	 mov	 eax, DWORD PTR nWarn$[rsp]
  005fa	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  005fe	8b 44 24 7c	 mov	 eax, DWORD PTR nGenObj$[rsp]
  00602	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00606	8b 44 24 74	 mov	 eax, DWORD PTR nIns$[rsp]
  0060a	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0060e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR nRules$[rsp]
  00615	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00619	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR nTokens$[rsp]
  00620	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00624	8b 44 24 68	 mov	 eax, DWORD PTR nPrintICFinal$[rsp]
  00628	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0062c	44 8b 4c 24 6c	 mov	 r9d, DWORD PTR nPrintIC$[rsp]
  00631	44 8b 44 24 64	 mov	 r8d, DWORD PTR nRun$[rsp]
  00636	8b 54 24 70	 mov	 edx, DWORD PTR nCGI$[rsp]
  0063a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82664
  00641	e8 00 00 00 00	 call	 simple_execute
; Line 222
  00646	33 c9		 xor	 ecx, ecx
  00648	e8 00 00 00 00	 call	 exit
$LN5@simple_sta:
; Line 224
  0064d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82666
  00654	e8 00 00 00 00	 call	 simple_fexists
  00659	85 c0		 test	 eax, eax
  0065b	74 79		 je	 SHORT $LN4@simple_sta
  0065d	83 bc 24 c0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00665	75 6f		 jne	 SHORT $LN4@simple_sta
; Line 225
  00667	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0066f	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  00674	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  0067b	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  0067f	8b 44 24 78	 mov	 eax, DWORD PTR nWarn$[rsp]
  00683	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00687	8b 44 24 7c	 mov	 eax, DWORD PTR nGenObj$[rsp]
  0068b	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  0068f	8b 44 24 74	 mov	 eax, DWORD PTR nIns$[rsp]
  00693	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00697	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR nRules$[rsp]
  0069e	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  006a2	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR nTokens$[rsp]
  006a9	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  006ad	8b 44 24 68	 mov	 eax, DWORD PTR nPrintICFinal$[rsp]
  006b1	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  006b5	44 8b 4c 24 6c	 mov	 r9d, DWORD PTR nPrintIC$[rsp]
  006ba	44 8b 44 24 64	 mov	 r8d, DWORD PTR nRun$[rsp]
  006bf	8b 54 24 70	 mov	 edx, DWORD PTR nCGI$[rsp]
  006c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82667
  006ca	e8 00 00 00 00	 call	 simple_execute
; Line 226
  006cf	33 c9		 xor	 ecx, ecx
  006d1	e8 00 00 00 00	 call	 exit
$LN4@simple_sta:
; Line 229
  006d6	83 bc 24 c0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  006de	74 0b		 je	 SHORT $LN2@simple_sta
  006e0	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR cStr$[rsp], 0
  006e9	75 05		 jne	 SHORT $LN3@simple_sta
$LN2@simple_sta:
; Line 230
  006eb	e8 00 00 00 00	 call	 display_help
$LN3@simple_sta:
; Line 232
  006f0	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  006f8	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  006fd	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  00704	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00708	8b 44 24 78	 mov	 eax, DWORD PTR nWarn$[rsp]
  0070c	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00710	8b 44 24 7c	 mov	 eax, DWORD PTR nGenObj$[rsp]
  00714	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00718	8b 44 24 74	 mov	 eax, DWORD PTR nIns$[rsp]
  0071c	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00720	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR nRules$[rsp]
  00727	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0072b	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR nTokens$[rsp]
  00732	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00736	8b 44 24 68	 mov	 eax, DWORD PTR nPrintICFinal$[rsp]
  0073a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0073e	44 8b 4c 24 6c	 mov	 r9d, DWORD PTR nPrintIC$[rsp]
  00743	44 8b 44 24 64	 mov	 r8d, DWORD PTR nRun$[rsp]
  00748	8b 54 24 70	 mov	 edx, DWORD PTR nCGI$[rsp]
  0074c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR cStr$[rsp]
  00754	e8 00 00 00 00	 call	 simple_execute
; Line 234
  00759	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR show_time$[rsp], 0
  00761	74 13		 je	 SHORT $LN1@simple_sta
; Line 235
  00763	8b 94 24 a0 00
	00 00		 mov	 edx, DWORD PTR after_execution$[rsp]
  0076a	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR before_execution$[rsp]
  00771	e8 00 00 00 00	 call	 simple_showtime
$LN1@simple_sta:
$LN55@simple_sta:
; Line 238
  00776	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0077d	c3		 ret	 0
simple_state_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
vm$ = 32
list$ = 40
sState$ = 64
cStr$ = 72
simple_state_newvar PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_state.c
; Line 138
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
; Line 141
  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR sState$[rsp]
  00013	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00017	48 89 44 24 20	 mov	 QWORD PTR vm$[rsp], rax
; Line 142
  0001c	48 8b 54 24 48	 mov	 rdx, QWORD PTR cStr$[rsp]
  00021	48 8b 4c 24 20	 mov	 rcx, QWORD PTR vm$[rsp]
  00026	e8 00 00 00 00	 call	 simple_vm_findvar
  0002b	85 c0		 test	 eax, eax
  0002d	75 0f		 jne	 SHORT $LN1@simple_sta
; Line 143
  0002f	48 8b 54 24 48	 mov	 rdx, QWORD PTR cStr$[rsp]
  00034	48 8b 4c 24 20	 mov	 rcx, QWORD PTR vm$[rsp]
  00039	e8 00 00 00 00	 call	 simple_vm_newvar
$LN1@simple_sta:
; Line 145
  0003e	48 8b 44 24 20	 mov	 rax, QWORD PTR vm$[rsp]
  00043	0f b6 80 30 18
	00 00		 movzx	 eax, BYTE PTR [rax+6192]
  0004a	48 6b c0 18	 imul	 rax, 24
  0004e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR vm$[rsp]
  00053	48 8b 44 01 38	 mov	 rax, QWORD PTR [rcx+rax+56]
  00058	48 89 44 24 28	 mov	 QWORD PTR list$[rsp], rax
; Line 146
  0005d	48 8b 44 24 20	 mov	 rax, QWORD PTR vm$[rsp]
  00062	0f b6 80 30 18
	00 00		 movzx	 eax, BYTE PTR [rax+6192]
  00069	fe c8		 dec	 al
  0006b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR vm$[rsp]
  00070	88 81 30 18 00
	00		 mov	 BYTE PTR [rcx+6192], al
; Line 147
  00076	48 8b 44 24 28	 mov	 rax, QWORD PTR list$[rsp]
; Line 148
  0007b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007f	c3		 ret	 0
simple_state_newvar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
vm$ = 32
list$ = 40
sState$ = 64
cStr$ = 72
simple_state_findvar PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_state.c
; Line 125
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
; Line 128
  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR sState$[rsp]
  00013	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00017	48 89 44 24 20	 mov	 QWORD PTR vm$[rsp], rax
; Line 129
  0001c	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR list$[rsp], 0
; Line 130
  00025	48 8b 54 24 48	 mov	 rdx, QWORD PTR cStr$[rsp]
  0002a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR vm$[rsp]
  0002f	e8 00 00 00 00	 call	 simple_vm_findvar
  00034	85 c0		 test	 eax, eax
  00036	74 38		 je	 SHORT $LN1@simple_sta
; Line 131
  00038	48 8b 44 24 20	 mov	 rax, QWORD PTR vm$[rsp]
  0003d	0f b6 80 30 18
	00 00		 movzx	 eax, BYTE PTR [rax+6192]
  00044	48 6b c0 18	 imul	 rax, 24
  00048	48 8b 4c 24 20	 mov	 rcx, QWORD PTR vm$[rsp]
  0004d	48 8b 44 01 38	 mov	 rax, QWORD PTR [rcx+rax+56]
  00052	48 89 44 24 28	 mov	 QWORD PTR list$[rsp], rax
; Line 132
  00057	48 8b 44 24 20	 mov	 rax, QWORD PTR vm$[rsp]
  0005c	0f b6 80 30 18
	00 00		 movzx	 eax, BYTE PTR [rax+6192]
  00063	fe c8		 dec	 al
  00065	48 8b 4c 24 20	 mov	 rcx, QWORD PTR vm$[rsp]
  0006a	88 81 30 18 00
	00		 mov	 BYTE PTR [rcx+6192], al
$LN1@simple_sta:
; Line 134
  00070	48 8b 44 24 28	 mov	 rax, QWORD PTR list$[rsp]
; Line 135
  00075	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00079	c3		 ret	 0
simple_state_findvar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sState$ = 48
cStr$ = 56
execute_code PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_state.c
; Line 120
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 121
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR cStr$[rsp]
  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR sState$[rsp]
  00018	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  0001c	e8 00 00 00 00	 call	 simple_vm_runcode
; Line 122
  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
execute_code ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sState$ = 32
create_instance PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_state.c
; Line 112
$LN3:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
; Line 114
  00004	e8 00 00 00 00	 call	 simple_state_new
  00009	48 89 44 24 20	 mov	 QWORD PTR sState$[rsp], rax
; Line 115
  0000e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sState$[rsp]
  00013	e8 00 00 00 00	 call	 simple_vm_init
; Line 116
  00018	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
; Line 117
  0001d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00021	c3		 ret	 0
create_instance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sState$ = 8
simple_state_cgiheader PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_state.c
; Line 105
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
; Line 106
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR sState$[rsp]
  0000a	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  0000d	83 e0 01	 and	 eax, 1
; Line 109
  00010	c3		 ret	 0
simple_state_cgiheader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sState$ = 48
finalize PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_state.c
; Line 80
$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 81
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR sState$[rsp]
  0000e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00012	74 36		 je	 SHORT $LN4@finalize
; Line 82
  00014	48 8b 44 24 30	 mov	 rax, QWORD PTR sState$[rsp]
  00019	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0001c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sState$[rsp]
  00021	e8 00 00 00 00	 call	 simple_list_delete_gc
  00026	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sState$[rsp]
  0002b	48 89 01	 mov	 QWORD PTR [rcx], rax
; Line 83
  0002e	48 8b 44 24 30	 mov	 rax, QWORD PTR sState$[rsp]
  00033	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sState$[rsp]
  0003c	e8 00 00 00 00	 call	 simple_list_delete_gc
  00041	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sState$[rsp]
  00046	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
$LN4@finalize:
; Line 85
  0004a	48 8b 44 24 30	 mov	 rax, QWORD PTR sState$[rsp]
  0004f	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00054	0f 84 98 00 00
	00		 je	 $LN3@finalize
; Line 86
  0005a	48 8b 44 24 30	 mov	 rax, QWORD PTR sState$[rsp]
  0005f	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00063	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sState$[rsp]
  00068	e8 00 00 00 00	 call	 simple_list_delete_gc
  0006d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sState$[rsp]
  00072	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
; Line 87
  00076	48 8b 44 24 30	 mov	 rax, QWORD PTR sState$[rsp]
  0007b	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  0007f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sState$[rsp]
  00084	e8 00 00 00 00	 call	 simple_list_delete_gc
  00089	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sState$[rsp]
  0008e	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
; Line 88
  00092	48 8b 44 24 30	 mov	 rax, QWORD PTR sState$[rsp]
  00097	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  0009b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sState$[rsp]
  000a0	e8 00 00 00 00	 call	 simple_list_delete_gc
  000a5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sState$[rsp]
  000aa	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
; Line 89
  000ae	48 8b 44 24 30	 mov	 rax, QWORD PTR sState$[rsp]
  000b3	48 8b 50 28	 mov	 rdx, QWORD PTR [rax+40]
  000b7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sState$[rsp]
  000bc	e8 00 00 00 00	 call	 simple_list_delete_gc
  000c1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sState$[rsp]
  000c6	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
; Line 90
  000ca	48 8b 44 24 30	 mov	 rax, QWORD PTR sState$[rsp]
  000cf	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  000d4	74 1c		 je	 SHORT $LN2@finalize
; Line 92
  000d6	48 8b 44 24 30	 mov	 rax, QWORD PTR sState$[rsp]
  000db	48 8b 50 30	 mov	 rdx, QWORD PTR [rax+48]
  000df	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sState$[rsp]
  000e4	e8 00 00 00 00	 call	 simple_list_delete_gc
  000e9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sState$[rsp]
  000ee	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax
$LN2@finalize:
$LN3@finalize:
; Line 95
  000f2	48 8b 44 24 30	 mov	 rax, QWORD PTR sState$[rsp]
  000f7	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  000fc	74 0e		 je	 SHORT $LN1@finalize
; Line 96
  000fe	48 8b 44 24 30	 mov	 rax, QWORD PTR sState$[rsp]
  00103	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  00107	e8 00 00 00 00	 call	 simple_vm_delete
$LN1@finalize:
; Line 98
  0010c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sState$[rsp]
  00111	e8 00 00 00 00	 call	 simple_poolmanager_delete
; Line 99
  00116	48 8b 44 24 30	 mov	 rax, QWORD PTR sState$[rsp]
  0011b	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  0011f	e8 00 00 00 00	 call	 simple_list_delete
  00124	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sState$[rsp]
  00129	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax
; Line 100
  0012d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sState$[rsp]
  00132	e8 00 00 00 00	 call	 simple_free
; Line 101
  00137	33 c0		 xor	 eax, eax
; Line 102
  00139	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0013d	c3		 ret	 0
finalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sState$ = 32
simple_state_new PROC
; File c:\users\thecarisma\documents\simple_github\simple\simple\sources\simple_state.c
; Line 42
$LN4:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
; Line 44
  00004	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00009	e8 00 00 00 00	 call	 simple_malloc
  0000e	48 89 44 24 20	 mov	 QWORD PTR sState$[rsp], rax
; Line 45
  00013	48 83 7c 24 20
	00		 cmp	 QWORD PTR sState$[rsp], 0
  00019	75 13		 jne	 SHORT $LN1@simple_sta
; Line 46
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG82509
  00022	e8 00 00 00 00	 call	 printf
; Line 47
  00027	33 c9		 xor	 ecx, ecx
  00029	e8 00 00 00 00	 call	 exit
$LN1@simple_sta:
; Line 49
  0002e	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  00033	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
; Line 50
  0003a	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  0003f	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
; Line 51
  00047	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  0004c	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0
; Line 52
  00054	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  00059	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
; Line 53
  00061	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  00066	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0
; Line 54
  0006e	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  00073	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0
; Line 55
  0007b	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  00080	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0
; Line 56
  00088	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  0008d	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  00090	83 e0 fe	 and	 eax, -2			; fffffffeH
  00093	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sState$[rsp]
  00098	89 41 38	 mov	 DWORD PTR [rcx+56], eax
; Line 57
  0009b	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  000a0	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  000a3	83 c8 02	 or	 eax, 2
  000a6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sState$[rsp]
  000ab	89 41 38	 mov	 DWORD PTR [rcx+56], eax
; Line 58
  000ae	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  000b3	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  000b6	83 e0 fb	 and	 eax, -5			; fffffffbH
  000b9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sState$[rsp]
  000be	89 41 38	 mov	 DWORD PTR [rcx+56], eax
; Line 59
  000c1	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  000c6	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  000c9	83 e0 f7	 and	 eax, -9			; fffffff7H
  000cc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sState$[rsp]
  000d1	89 41 38	 mov	 DWORD PTR [rcx+56], eax
; Line 60
  000d4	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  000d9	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  000dc	83 e0 ef	 and	 eax, -17		; ffffffefH
  000df	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sState$[rsp]
  000e4	89 41 38	 mov	 DWORD PTR [rcx+56], eax
; Line 61
  000e7	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  000ec	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  000ef	83 e0 df	 and	 eax, -33		; ffffffdfH
  000f2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sState$[rsp]
  000f7	89 41 38	 mov	 DWORD PTR [rcx+56], eax
; Line 62
  000fa	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  000ff	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  00102	83 e0 bf	 and	 eax, -65		; ffffffbfH
  00105	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sState$[rsp]
  0010a	89 41 38	 mov	 DWORD PTR [rcx+56], eax
; Line 63
  0010d	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  00112	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  00115	0f ba f0 07	 btr	 eax, 7
  00119	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sState$[rsp]
  0011e	89 41 38	 mov	 DWORD PTR [rcx+56], eax
; Line 64
  00121	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  00126	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [rax+60], 0
; Line 65
  0012d	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  00132	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0
; Line 66
  0013a	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  0013f	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0
; Line 67
  00147	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  0014c	c6 40 50 00	 mov	 BYTE PTR [rax+80], 0
; Line 68
  00150	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  00155	48 c7 40 58 00
	00 00 00	 mov	 QWORD PTR [rax+88], 0
; Line 69
  0015d	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  00162	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
; Line 70
  0016a	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  0016f	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
; Line 71
  00177	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  0017c	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  0017f	0f ba f0 08	 btr	 eax, 8
  00183	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sState$[rsp]
  00188	89 41 38	 mov	 DWORD PTR [rcx+56], eax
; Line 72
  0018b	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  00190	c6 40 70 00	 mov	 BYTE PTR [rax+112], 0
; Line 73
  00194	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  00199	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [rax+116], 0
; Line 74
  001a0	33 c9		 xor	 ecx, ecx
  001a2	e8 00 00 00 00	 call	 simple_list_new
  001a7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sState$[rsp]
  001ac	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax
; Line 75
  001b0	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  001b5	8b 50 74	 mov	 edx, DWORD PTR [rax+116]
  001b8	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
  001bd	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  001c1	e8 00 00 00 00	 call	 simple_list_addint
; Line 76
  001c6	48 8b 44 24 20	 mov	 rax, QWORD PTR sState$[rsp]
$LN3@simple_sta:
; Line 77
  001cb	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001cf	c3		 ret	 0
simple_state_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Time$ = 48
time	PROC
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\time.inl
; Line 132
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 133
  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  0000e	e8 00 00 00 00	 call	 _time64
; Line 134
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
time	ENDP
_TEXT	ENDS
END
